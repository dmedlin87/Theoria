name: CI

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  pull-requests: read

jobs:
  constraints:
    name: Validate dependency constraints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: '3.11'

      - name: Install UV for dependency compilation
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Ensure constraint lockfiles are current
        run: python scripts/update_constraints.py --check

  test:
    needs: constraints
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PYTHONPATH: ${{ github.workspace }}
      SETTINGS_SECRET_KEY: geo-ci-secret
      FIXTURES_ROOT: ${{ github.workspace }}/fixtures
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            constraints/prod.txt
            constraints/dev.txt
            constraints-ci.txt

      - name: Install compatible pip and pip-tools
        run: |
          python -m pip install --upgrade 'pip<24.1'
          pip install 'pip-tools>=7.4.1,<7.5'

      - name: Preinstall CPU-only PyTorch
        run: |
          pip install --index-url https://download.pytorch.org/whl/cpu torch==2.4.0

      - name: Install Python dependencies
        run: |
          pip install --no-deps -e ".[api,ml,dev]"
          pip install -c constraints/prod.txt -c constraints-ci.txt ".[api]"
          pip install -c constraints/prod.txt -c constraints-ci.txt ".[ml]"
          pip install -c constraints/dev.txt -c constraints-ci.txt ".[dev]"

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Install Node.js dependencies
        working-directory: theo/services/web
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('theo/services/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        working-directory: theo/services/web
        run: npx playwright install --with-deps

      - name: Run Ruff
        run: ruff check

      - name: Run mypy
        run: mypy --config-file mypy.ini

      - name: Run ESLint and TypeScript checks
        working-directory: theo/services/web
        run: npm run lint

      - name: Enforce UI quality gates
        working-directory: theo/services/web
        run: npm run quality:gates

      - name: Run architecture tests
        run: pytest tests/architecture -q

      - name: Enforce Python import boundaries
        run: lint-imports --config importlinter.ini

      - name: Run Jest unit tests
        working-directory: theo/services/web
        run: npm test

      - name: Run Vitest unit tests with coverage
        working-directory: theo/services/web
        run: npm run test:vitest

      - name: Show Vitest output tree
        if: always()
        run: |
          ls -la theo/services/web || true
          ls -la theo/services/web/coverage || true

      - name: Run Playwright E2E suite
        working-directory: theo/services/web
        run: npm run test:e2e:full

      - name: Show Playwright outputs
        if: always()
        run: |
          ls -la theo/services/web/playwright-report || true
          ls -la theo/services/web/playwright-artifacts || true

      - name: Run pytest suite (fast)
        run: pytest -m "not (slow or gpu or contract)" --cov=theo --cov=tests --cov-report=xml --cov-report=term --cov-fail-under=80

      - name: Show pytest coverage presence
        if: always()
        run: ls -la coverage.xml || true

      - name: Upload pytest coverage report
        if: always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v4
        with:
          name: pytest-coverage
          path: coverage.xml
          if-no-files-found: warn

      - name: Enforce critical coverage thresholds
        run: python scripts/security/verify_critical_coverage.py

      - name: Run Geo pytest suite
        run: pytest tests/geo -q


      - name: Generate Python SBOM
        run: |
          cyclonedx-py requirements \
            --sv 1.5 \
            --of json \
            -o sbom-python.json \
            constraints/prod.txt \
            constraints/dev.txt \
            constraints-ci.txt

      - name: Generate Node SBOM
        working-directory: theo/services/web
        run: npx --yes @cyclonedx/cyclonedx-npm@1.12.0 --output-format json --output-file ../../sbom-node.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v4
        with:
          name: cyclonedx-sboms
          path: |
            sbom-python.json
            sbom-node.json
          if-no-files-found: warn

      - name: Upload Vitest coverage report
        if: always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v4
        with:
          name: vitest-coverage
          path: theo/services/web/coverage
          if-no-files-found: warn

      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v4
        with:
          name: playwright-artifacts
          path: |
            theo/services/web/playwright-report
            theo/services/web/playwright-artifacts

  heavy-tests:
    name: Heavy pytest suites
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 45
    strategy:
      matrix:
        suite: [schema, pgvector, contract]
    env:
      PYTHONPATH: ${{ github.workspace }}
      SETTINGS_SECRET_KEY: geo-ci-secret
      FIXTURES_ROOT: ${{ github.workspace }}/fixtures
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            constraints/prod.txt
            constraints/dev.txt
            constraints-ci.txt

      - name: Install compatible pip and pip-tools
        run: |
          python -m pip install --upgrade 'pip<24.1'
          pip install 'pip-tools>=7.4.1,<7.5'

      - name: Preinstall CPU-only PyTorch
        run: |
          pip install --index-url https://download.pytorch.org/whl/cpu torch==2.4.0

      - name: Install Python dependencies
        run: |
          pip install --no-deps -e ".[api,ml,dev]"
          pip install -c constraints/prod.txt -c constraints-ci.txt ".[api]"
          pip install -c constraints/prod.txt -c constraints-ci.txt ".[ml]"
          pip install -c constraints/dev.txt -c constraints-ci.txt ".[dev]"

      - name: Run ${{ matrix.suite }} pytest suite with profiling
        env:
          PYTEST_ADDOPTS: -n=auto --dist=loadscope --max-worker-restart=0
        run: |
          python scripts/perf/profile_marker_suites.py \
            --output perf_metrics/${{ matrix.suite }}-ci.json \
            ${{ matrix.suite }}

      - name: Upload ${{ matrix.suite }} timing profile
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: pytest-${{ matrix.suite }}-profile
          path: perf_metrics/${{ matrix.suite }}-ci.json
          if-no-files-found: warn

  web_accessibility:
    name: Web axe accessibility scans
    runs-on: ubuntu-latest
    needs: test
    env:
      PYTHONPATH: ${{ github.workspace }}
      SETTINGS_SECRET_KEY: geo-ci-secret
      FIXTURES_ROOT: ${{ github.workspace }}/fixtures
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Install Node.js dependencies
        working-directory: theo/services/web
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('theo/services/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        working-directory: theo/services/web
        run: npx playwright install --with-deps

      - name: Run axe accessibility scans
        working-directory: theo/services/web
        env:
          NEXT_PUBLIC_API_BASE_URL: "http://127.0.0.1:8000"
          THEO_ALLOW_INSECURE_STARTUP: "1"
          THEO_AUTH_ALLOW_ANONYMOUS: "1"
        run: npm run test:a11y

      - name: Upload accessibility artifacts
        if: always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v4
        with:
          name: axe-playwright-artifacts
          path: |
            theo/services/web/playwright-report
            theo/services/web/playwright-artifacts
          if-no-files-found: warn

  web_visual_regression:
    name: Web visual regression
    runs-on: ubuntu-latest
    needs: test
    env:
      PYTHONPATH: ${{ github.workspace }}
      SETTINGS_SECRET_KEY: geo-ci-secret
      FIXTURES_ROOT: ${{ github.workspace }}/fixtures
      PERCY_TOKEN: ${{ secrets.PERCY_TOKEN || '' }}
    steps:
      - name: Verify Percy token
        id: verify-token
        run: |
          if [ -z "${PERCY_TOKEN:-}" ]; then
            echo "::warning::PERCY_TOKEN is not configured. Skipping visual regression tests."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout repository
        if: steps.verify-token.outputs.skip != 'true'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Node.js
        if: steps.verify-token.outputs.skip != 'true'
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Install Node.js dependencies
        if: steps.verify-token.outputs.skip != 'true'
        working-directory: theo/services/web
        run: npm ci

      - name: Cache Playwright browsers
        if: steps.verify-token.outputs.skip != 'true'
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('theo/services/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        if: steps.verify-token.outputs.skip != 'true'
        working-directory: theo/services/web
        run: npx playwright install --with-deps

      - name: Run Percy visual regression suite
        if: steps.verify-token.outputs.skip != 'true'
        working-directory: theo/services/web
        env:
          NEXT_PUBLIC_API_BASE_URL: "http://127.0.0.1:8000"
          THEO_ALLOW_INSECURE_STARTUP: "1"
          THEO_AUTH_ALLOW_ANONYMOUS: "1"
        run: npm run test:e2e:visual

      - name: Upload Percy artifacts
        if: steps.verify-token.outputs.skip != 'true' && always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v4
        with:
          name: percy-visual-artifacts
          path: |
            theo/services/web/playwright-report
            theo/services/web/playwright-artifacts
          if-no-files-found: warn

  web_lighthouse:
    name: Web Lighthouse smoke tests
    runs-on: ubuntu-latest
    needs: test
    env:
      PYTHONPATH: ${{ github.workspace }}
      SETTINGS_SECRET_KEY: geo-ci-secret
      FIXTURES_ROOT: ${{ github.workspace }}/fixtures
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            constraints/prod.txt
            constraints/dev.txt
            constraints-ci.txt

      - name: Install compatible pip and pip-tools
        run: |
          python -m pip install --upgrade 'pip<24.1'
          pip install 'pip-tools>=7.4.1,<7.5'

      - name: Preinstall CPU-only PyTorch
        run: |
          pip install --index-url https://download.pytorch.org/whl/cpu torch==2.4.0

      - name: Install Python dependencies
        run: |
          pip install --no-deps -e ".[api,ml,dev]"
          pip install -c constraints/prod.txt -c constraints-ci.txt ".[api]"
          pip install -c constraints/prod.txt -c constraints-ci.txt ".[ml]"
          pip install -c constraints/dev.txt -c constraints-ci.txt ".[dev]"

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Install Node.js dependencies
        working-directory: theo/services/web
        run: npm ci

      - name: Start backend API
        env:
          DATABASE_URL: sqlite:///./lighthouse.db
        run: |
          uvicorn theo.infrastructure.api.app.main:app --host 127.0.0.1 --port 8000 &
          sleep 5
          curl --retry 5 --retry-delay 2 --retry-connrefused http://127.0.0.1:8000/health || echo "Backend health check failed but continuing"

      - name: Run Lighthouse smoke tests
        working-directory: theo/services/web
        env:
          APP_ORIGIN: http://127.0.0.1:3000
          NEXT_PUBLIC_API_BASE_URL: http://127.0.0.1:8000
          NEXT_TELEMETRY_DISABLED: '1'
          THEO_ALLOW_INSECURE_STARTUP: '1'
          THEO_AUTH_ALLOW_ANONYMOUS: '1'
        run: npm run test:lighthouse:smoke

      - name: Upload Lighthouse artifacts
        if: always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v4
        with:
          name: lighthouse-smoke
          path: |
            theo/services/web/.lighthouseci
