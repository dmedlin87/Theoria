name: CI

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PYTHONPATH: ${{ github.workspace }}
      SETTINGS_SECRET_KEY: geo-ci-secret
      FIXTURES_ROOT: ${{ github.workspace }}/fixtures
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            constraints-ci.txt

      - name: Preinstall CPU-only PyTorch
        run: |
          python -m pip install --upgrade pip
          pip install --index-url https://download.pytorch.org/whl/cpu torch==2.8.0

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt -c constraints-ci.txt
          pip install -r requirements-dev.txt -c constraints-ci.txt

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Install Node.js dependencies
        working-directory: theo/services/web
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('theo/services/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        working-directory: theo/services/web
        run: npx playwright install --with-deps

      - name: Run Ruff
        run: ruff check

      - name: Run mypy
        run: mypy --config-file mypy.ini

      - name: Run ESLint and TypeScript checks
        working-directory: theo/services/web
        run: npm run lint

      - name: Enforce UI quality gates
        working-directory: theo/services/web
        run: npm run quality:gates

      - name: Run Jest unit tests
        working-directory: theo/services/web
        run: npm test

      - name: Run Vitest unit tests with coverage
        working-directory: theo/services/web
        run: npm run test:vitest

      - name: Show Vitest output tree
        if: always()
        run: |
          ls -la theo/services/web || true
          ls -la theo/services/web/coverage || true

      - name: Run Playwright E2E suite
        working-directory: theo/services/web
        run: npm run test:e2e:full

      - name: Show Playwright outputs
        if: always()
        run: |
          ls -la theo/services/web/playwright-report || true
          ls -la theo/services/web/playwright-artifacts || true

      - name: Run pytest suite
        run: pytest --cov=theo --cov=tests --cov-report=xml --cov-report=term --cov-fail-under=80

      - name: Show pytest coverage presence
        if: always()
        run: ls -la coverage.xml || true

      - name: Upload pytest coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-coverage
          path: coverage.xml
          if-no-files-found: warn

      - name: Enforce critical coverage thresholds
        run: python scripts/security/verify_critical_coverage.py

      - name: Run Geo pytest suite
        run: pytest tests/geo -q

      - name: Run contract tests
        run: pytest tests/contracts/test_schemathesis.py

      - name: Generate Python SBOM
        run: cyclonedx-bom --spec-version 1.5 --requirements requirements.txt --outfile sbom-python.json --format json

      - name: Generate Node SBOM
        working-directory: theo/services/web
        run: npx --yes @cyclonedx/cyclonedx-npm@1.12.0 --output-format json --output-file ../../sbom-node.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cyclonedx-sboms
          path: |
            sbom-python.json
            sbom-node.json
          if-no-files-found: warn

      - name: Upload Vitest coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vitest-coverage
          path: theo/services/web/coverage
          if-no-files-found: warn

      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: |
            theo/services/web/playwright-report
            theo/services/web/playwright-artifacts

  web_accessibility:
    name: Web axe accessibility scans
    runs-on: ubuntu-latest
    needs: test
    env:
      PYTHONPATH: ${{ github.workspace }}
      SETTINGS_SECRET_KEY: geo-ci-secret
      FIXTURES_ROOT: ${{ github.workspace }}/fixtures
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Install Node.js dependencies
        working-directory: theo/services/web
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('theo/services/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        working-directory: theo/services/web
        run: npx playwright install --with-deps

      - name: Run axe accessibility scans
        working-directory: theo/services/web
        env:
          NEXT_PUBLIC_API_BASE_URL: "http://127.0.0.1:8000"
          THEO_ALLOW_INSECURE_STARTUP: "1"
          THEO_AUTH_ALLOW_ANONYMOUS: "1"
        run: npm run test:a11y

      - name: Upload accessibility artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: axe-playwright-artifacts
          path: |
            theo/services/web/playwright-report
            theo/services/web/playwright-artifacts
          if-no-files-found: warn

  web_visual_regression:
    name: Web visual regression
    runs-on: ubuntu-latest
    needs: test
    env:
      PYTHONPATH: ${{ github.workspace }}
      SETTINGS_SECRET_KEY: geo-ci-secret
      FIXTURES_ROOT: ${{ github.workspace }}/fixtures
      PERCY_TOKEN: ${{ secrets.PERCY_TOKEN || '' }}
    steps:
      - name: Verify Percy token
        id: verify-token
        run: |
          if [ -z "${PERCY_TOKEN:-}" ]; then
            echo "::warning::PERCY_TOKEN is not configured. Skipping visual regression tests."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout repository
        if: steps.verify-token.outputs.skip != 'true'
        uses: actions/checkout@v5

      - name: Set up Node.js
        if: steps.verify-token.outputs.skip != 'true'
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Install Node.js dependencies
        if: steps.verify-token.outputs.skip != 'true'
        working-directory: theo/services/web
        run: npm ci

      - name: Cache Playwright browsers
        if: steps.verify-token.outputs.skip != 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('theo/services/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        if: steps.verify-token.outputs.skip != 'true'
        working-directory: theo/services/web
        run: npx playwright install --with-deps

      - name: Run Percy visual regression suite
        if: steps.verify-token.outputs.skip != 'true'
        working-directory: theo/services/web
        env:
          NEXT_PUBLIC_API_BASE_URL: "http://127.0.0.1:8000"
          THEO_ALLOW_INSECURE_STARTUP: "1"
          THEO_AUTH_ALLOW_ANONYMOUS: "1"
        run: npm run test:e2e:visual

      - name: Upload Percy artifacts
        if: steps.verify-token.outputs.skip != 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: percy-visual-artifacts
          path: |
            theo/services/web/playwright-report
            theo/services/web/playwright-artifacts
          if-no-files-found: warn

  web_lighthouse:
    name: Web Lighthouse smoke tests
    runs-on: ubuntu-latest
    needs: test
    env:
      PYTHONPATH: ${{ github.workspace }}
      SETTINGS_SECRET_KEY: geo-ci-secret
      FIXTURES_ROOT: ${{ github.workspace }}/fixtures
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            constraints-ci.txt

      - name: Preinstall CPU-only PyTorch
        run: |
          python -m pip install --upgrade pip
          pip install --index-url https://download.pytorch.org/whl/cpu torch==2.8.0

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt -c constraints-ci.txt
          pip install -r requirements-dev.txt -c constraints-ci.txt

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Install Node.js dependencies
        working-directory: theo/services/web
        run: npm ci

      - name: Start backend API
        env:
          DATABASE_URL: sqlite:///./lighthouse.db
        run: |
          uvicorn theo.services.api.app.main:app --host 127.0.0.1 --port 8000 &
          sleep 5
          curl --retry 5 --retry-delay 2 --retry-connrefused http://127.0.0.1:8000/health || echo "Backend health check failed but continuing"

      - name: Run Lighthouse smoke tests
        working-directory: theo/services/web
        env:
          APP_ORIGIN: http://127.0.0.1:3000
          NEXT_PUBLIC_API_BASE_URL: http://127.0.0.1:8000
          NEXT_TELEMETRY_DISABLED: '1'
          THEO_ALLOW_INSECURE_STARTUP: '1'
          THEO_AUTH_ALLOW_ANONYMOUS: '1'
        run: npm run test:lighthouse:smoke

      - name: Upload Lighthouse artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-smoke
          path: |
            theo/services/web/.lighthouseci
