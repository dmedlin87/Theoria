name: Coverage Monitor

on:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: coverage-monitor
  cancel-in-progress: false

jobs:
  monitor:
    name: Nightly coverage aggregation
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PYTHONPATH: ${{ github.workspace }}
      SETTINGS_SECRET_KEY: geo-ci-secret
      FIXTURES_ROOT: ${{ github.workspace }}/fixtures
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            constraints/prod.txt
            constraints/dev.txt
            constraints-ci.txt

      - name: Install compatible pip and pip-tools
        run: |
          python -m pip install --upgrade 'pip<24.1'
          pip install 'pip-tools>=7.4.1,<7.5'

      - name: Preinstall CPU-only PyTorch
        run: |
          pip install --index-url https://download.pytorch.org/whl/cpu torch==2.9.0+cpu

      - name: Install Python dependencies
        run: |
          pip install -e ".[api]" -c constraints-ci.txt -c constraints/prod.txt
          pip install -e ".[ml]" -c constraints-ci.txt -c constraints/prod.txt
          pip install -e ".[dev]" -c constraints-ci.txt -c constraints/dev.txt

      - name: Set up Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Install Node.js dependencies
        working-directory: theo/services/web
        run: npm ci

      - name: Run Vitest coverage suite
        working-directory: theo/services/web
        run: npm run test:vitest

      - name: Verify Vitest coverage thresholds
        working-directory: theo/services/web
        run: node scripts/ci/verify-vitest-coverage.mjs

      - name: Run pytest suite with coverage
        run: |
          pytest -m "not (slow or gpu or contract)" \
            --cov=theo \
            --cov=tests \
            --cov-report=xml:coverage.xml \
            --cov-report=html:coverage-html \
            --cov-report=term \
            --cov-fail-under=80

      - name: Enforce critical coverage thresholds
        run: python scripts/security/verify_critical_coverage.py

      - name: Aggregate coverage metrics
        id: aggregate
        run: |
          python scripts/ci/aggregate_coverage.py \
            --backend-report coverage.xml \
            --frontend-coverage theo/services/web/coverage \
            --baseline metrics/coverage-baseline.json \
            --output coverage-report.json

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v4
        with:
          name: coverage-monitor-artifacts
          path: |
            coverage.xml
            coverage-html
            coverage-report.json
            theo/services/web/coverage
          if-no-files-found: warn

      - name: Notify open PRs about coverage regression
        if: steps.aggregate.outputs.regressed == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        env:
          COVERAGE_SUMMARY: ${{ steps.aggregate.outputs.summary }}
        with:
          script: |
            const marker = "<!-- coverage-regression-report -->";
            const body = `${marker}\n${process.env.COVERAGE_SUMMARY}`;

            const prs = await github.paginate(github.rest.pulls.list, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "open",
              per_page: 100,
            });

            if (prs.length === 0) {
              core.info("No open pull requests to notify.");
              return;
            }

            for (const pr of prs) {
              const comments = await github.paginate(github.rest.issues.listComments, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                per_page: 100,
              });

              const existing = comments.find((comment) => comment.body?.startsWith(marker));

              if (existing) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existing.id,
                  body,
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body,
                });
              }
            }

      - name: Log coverage summary
        if: steps.aggregate.outputs.summary != ''
        run: |
          printf '%s\n' "${{ steps.aggregate.outputs.summary }}"
