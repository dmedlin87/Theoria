name: Release Containers

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write
  security-events: write

env:
  REGISTRY: ghcr.io

jobs:
  build-sign-attest:
    name: Build, sign, and attest API image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Prepare image metadata
        id: meta
        run: |
          OWNER=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          IMAGE_REF="${REGISTRY}/${OWNER}/theoria-api"
          VERSION_TAG="${GITHUB_REF_NAME:-manual-${GITHUB_RUN_ID}}"
          VERSION_TAG=$(echo "${VERSION_TAG}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          echo "image=${IMAGE_REF}" >> "$GITHUB_OUTPUT"
          echo "version_tag=${VERSION_TAG}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          file: theo/services/api/Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.image }}:${{ github.sha }}
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.version_tag }}

      - name: Scan image for vulnerabilities
        id: trivy
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: ${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }}
          scan-type: 'image'
          scanners: 'vuln'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          vuln-type: 'os,library'

      - name: Upload Trivy scan report
        if: always()
        uses: github/codeql-action/upload-sarif@16140ae1a102900babc80a33c44059580f687047 # v4
        with:
          sarif_file: trivy-results.sarif

      - name: Install Cosign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0
        with:
          cosign-release: 'v2.4.1'

      - name: Generate CycloneDX image SBOM
        uses: anchore/sbom-action@aa0e114b2e19480f157109b9922bda359bd98b90 # v0.20.8
        with:
          image: ${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }}
          format: cyclonedx-json
          output-file: sbom-image.cdx.json

      - name: Prepare build attestation predicate
        id: predicate
        env:
          IMAGE: ${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }}
          VERSION_TAG: ${{ steps.meta.outputs.version_tag }}
        run: |
          SBOM_SHA256="$(sha256sum sbom-image.cdx.json | cut -d ' ' -f1)"
          BUILD_TIMESTAMP="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          SOURCE_SHA1="$(git rev-parse HEAD)"
          cat <<JSON > build-attestation.json
          {
            "builder": {
              "id": "https://github.com/${GITHUB_REPOSITORY}/.github/workflows/deployment-sign.yml"
            },
            "buildType": "https://theoria.dev/attestations/container-build",
            "buildConfig": {
              "workflow": "${{ github.workflow }}",
              "run_id": "${{ github.run_id }}",
              "run_attempt": "${{ github.run_attempt }}",
              "runner": "${{ runner.name }}"
            },
            "metadata": {
              "image": "${IMAGE}",
              "version_tag": "${VERSION_TAG}",
              "git_ref": "${GITHUB_REF}",
              "git_sha": "${GITHUB_SHA}",
              "repository": "${GITHUB_REPOSITORY}",
              "build_timestamp": "${BUILD_TIMESTAMP}"
            },
            "materials": [
              {
                "uri": "git+https://github.com/${GITHUB_REPOSITORY}@${GITHUB_SHA}",
                "digest": {
                  "sha1": "${SOURCE_SHA1}"
                }
              }
            ],
            "sbom": {
              "file": "sbom-image.cdx.json",
              "sha256": "${SBOM_SHA256}",
              "format": "cyclonedx-json"
            }
          }
          JSON
          echo "sbom_sha256=${SBOM_SHA256}" >> "$GITHUB_OUTPUT"

      - name: Sign container image with Sigstore
        env:
          COSIGN_YES: 'true'
        run: |
          cosign sign --keyless ${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }}

      - name: Create provenance attestation
        env:
          COSIGN_YES: 'true'
        run: |
          cosign attest \
            --predicate build-attestation.json \
            --type https://theoria.dev/attestations/container-build \
            ${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }}

      - name: Verify image signature
        env:
          COSIGN_YES: 'true'
          EXPECTED_IDENTITY: https://github.com/${{ github.repository }}/.github/workflows/deployment-sign.yml@${{ github.ref }}
        run: |
          cosign verify \
            --certificate-identity "${EXPECTED_IDENTITY}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            ${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }}

      - name: Verify build attestation presence
        env:
          COSIGN_YES: 'true'
          EXPECTED_IDENTITY: https://github.com/${{ github.repository }}/.github/workflows/deployment-sign.yml@${{ github.ref }}
        run: |
          cosign verify-attestation \
            --type https://theoria.dev/attestations/container-build \
            --certificate-identity "${EXPECTED_IDENTITY}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            ${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }}

      - name: Write image metadata summary
        run: |
          cat <<'JSON' > image-metadata.json
          {
            "image": "${{ steps.meta.outputs.image }}",
            "digest": "${{ steps.build.outputs.digest }}",
            "tags": [
              "${{ steps.meta.outputs.image }}:${{ github.sha }}",
              "${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.version_tag }}"
            ]
          }
          JSON

      - name: Download signature and attestation
        env:
          COSIGN_YES: 'true'
        run: |
          cosign download signature ${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }} > image-signature.sig
          cosign download attestation ${{ steps.meta.outputs.image }}@${{ steps.build.outputs.digest }} > image-provenance.intoto.jsonl

      - name: Upload signing artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: signed-image-metadata
          path: |
            sbom-image.cdx.json
            image-metadata.json
            build-attestation.json
            image-signature.sig
            image-provenance.intoto.jsonl
          if-no-files-found: error

      - name: Publish signing assets to release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! gh release view "${GITHUB_REF_NAME}" >/dev/null 2>&1; then
            gh release create "${GITHUB_REF_NAME}" --notes "Automated container release for ${GITHUB_REF_NAME}"
          fi
          gh release upload "${GITHUB_REF_NAME}" \
            sbom-image.cdx.json \
            image-metadata.json \
            build-attestation.json \
            image-signature.sig \
            image-provenance.intoto.jsonl \
            --clobber
