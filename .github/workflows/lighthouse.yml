name: Lighthouse CI

on:
  push:
    branches:
      - main

      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    - cron: '0 6 * * 1'

jobs:
  audit:
    name: Run Lighthouse CI
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Lighthouse CI
        run: npm install --global @lhci/cli@0.15.1

      - name: Verify staging availability
        shell: bash
        env:
          LHCI_BASIC_AUTH_USER: ${{ secrets.STAGING_BASIC_AUTH_USERNAME }}
          LHCI_BASIC_AUTH_PASSWORD: ${{ secrets.STAGING_BASIC_AUTH_PASSWORD }}
        run: |
          set -euo pipefail
          URL=$(node -e "const cfg = require('./.lighthouserc.json'); const urls = cfg?.ci?.collect?.url || []; process.stdout.write(urls[0] ?? '');")
          if [ -z "$URL" ]; then
            echo 'Unable to determine the Lighthouse target URL from .lighthouserc.json.'
            exit 1
          fi

          if [ -n "${LHCI_BASIC_AUTH_USER:-}" ] && [ -n "${LHCI_BASIC_AUTH_PASSWORD:-}" ]; then
            AUTH_ARGS=(--user "${LHCI_BASIC_AUTH_USER}:${LHCI_BASIC_AUTH_PASSWORD}")
          else
            AUTH_ARGS=()
          fi

          for attempt in {1..5}; do
            if curl --fail --silent --show-error --location "${AUTH_ARGS[@]}" "$URL" > /dev/null; then
              exit 0
            fi
            echo "Attempt ${attempt} to reach $URL failed; retrying in 5 seconds..."
            sleep 5
          done

          echo "Unable to reach $URL after multiple attempts." >&2
          exit 1

      - name: Run Lighthouse against staging
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.LHCI_GITHUB_TOKEN }}
          LHCI_BASIC_AUTH_USER: ${{ secrets.STAGING_BASIC_AUTH_USERNAME }}
          LHCI_BASIC_AUTH_PASSWORD: ${{ secrets.STAGING_BASIC_AUTH_PASSWORD }}
        run: |
          rm -rf .lighthouseci/current
          lhci autorun --config=.lighthouserc.json

      - name: Compare scores with baseline
        run: node scripts/compare-lighthouse-baseline.mjs

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-${{ github.run_id }}
          path: .lighthouseci/current
          if-no-files-found: error
          retention-days: 14

  pull_request:
  workflow_dispatch:
    inputs:
      target:
        description: "Where to run Lighthouse"
        type: choice
        default: localhost
        options:
          - localhost
          - staging

env:
  DEFAULT_LOCAL: 'http://127.0.0.1:3000'
  STAGING_URL: 'https://staging.theoengine.com'

permissions:
  contents: read

jobs:
  lighthouse:
    name: Lighthouse audit
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ (github.event.inputs.target == 'staging') && 'lhci-staging' || format('lhci-{0}-localhost', github.ref) }}
      cancel-in-progress: true
    env:
      APP_PORT: 3000
      APP_HOST: 127.0.0.1
    defaults:
      run:
        working-directory: theo/services/web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Select target URL
        id: select
        shell: bash
        run: |
          if [ "${{ github.event.inputs.target }}" = "staging" ]; then
            echo "APP_ORIGIN=${STAGING_URL}" >> "$GITHUB_ENV"
            echo "app_origin=${STAGING_URL}" >> "$GITHUB_OUTPUT"
          else
            echo "APP_ORIGIN=${DEFAULT_LOCAL}" >> "$GITHUB_ENV"
            echo "app_origin=${DEFAULT_LOCAL}" >> "$GITHUB_OUTPUT"
          fi

      - name: Print effective target (debug)
        run: |
          echo "target=${{ github.event.inputs.target || 'localhost' }}"
          echo "APP_ORIGIN=$APP_ORIGIN"
          echo "LHCI_COLLECT__URL will be $APP_ORIGIN"

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        if: ${{ github.event.inputs.target != 'staging' }}
        run: npm run build

      - name: Start Next.js server
        if: ${{ github.event.inputs.target != 'staging' }}
        shell: bash
        run: |
          mkdir -p .lighthouseci
          npm run start -- --hostname 0.0.0.0 --port "$APP_PORT" \
            > .lighthouseci/server.log 2>&1 &

      - name: Wait for server
        if: ${{ github.event.inputs.target != 'staging' }}
        shell: bash
        run: |
          TARGET_URL="${APP_ORIGIN%/}"
          for attempt in $(seq 1 30); do
            if curl --fail --silent --head "$TARGET_URL"; then
              exit 0
            fi
            echo "Attempt $attempt to reach $TARGET_URL failed; retrying in 2 seconds..."
            sleep 2
          done
          echo "Unable to reach $TARGET_URL after multiple attempts." >&2
          exit 1

      - name: Check staging reachability
        id: ping
        if: ${{ github.event.inputs.target == 'staging' }}
        run: |
          if curl -Isf --max-time 8 "$APP_ORIGIN" >/dev/null; then
            echo "reachable=true" >> "$GITHUB_OUTPUT"
          else
            echo "reachable=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Note skip (staging unreachable)
        if: ${{ github.event.inputs.target == 'staging' && steps.ping.outputs.reachable != 'true' }}
        run: echo "Skipping LHCI; $APP_ORIGIN unreachable."

      - name: Run Lighthouse CI
        if: ${{ github.event.inputs.target != 'staging' || steps.ping.outputs.reachable == 'true' }}
        env:
          LHCI_COLLECT__URL: ${{ steps.select.outputs.app_origin }}
        run: |
          npx --yes @lhci/cli@0.14.0 autorun --config ../../../lighthouserc.json

      - name: Upload Lighthouse artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: theo/services/web/.lighthouseci
          if-no-files-found: warn

      - name: Stop Next.js server
        if: ${{ always() && github.event.inputs.target != 'staging' }}
        shell: bash
        run: |
          pkill -f "next start" || true

