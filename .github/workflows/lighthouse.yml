name: Lighthouse CI

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'theo/services/web/**'
      - 'lighthouserc.json'
      - '.github/workflows/lighthouse.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'theo/services/web/**'
      - 'lighthouserc.json'
      - '.github/workflows/lighthouse.yml'
  schedule:
    - cron: '0 6 * * 1'

  workflow_dispatch:
    inputs:
      target:
        description: "Where to run Lighthouse"
        type: choice
        default: localhost
        options:
          - localhost
          - staging

env:
  DEFAULT_LOCAL: 'http://127.0.0.1:3000'
  STAGING_URL: 'https://staging.theoengine.com'

permissions:
  contents: read

jobs:
  lighthouse:
    name: Lighthouse audit
    runs-on: ubuntu-latest
    concurrency:
      group: lhci-${{ github.event.inputs.target || 'localhost' }}-${{ github.ref }}
      cancel-in-progress: true
    env:
      APP_PORT: 3000
      APP_HOST: 127.0.0.1
    defaults:
      run:
        working-directory: theo/services/web
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Use Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: theo/services/web/package-lock.json

      - name: Select target URL
        id: select
        shell: bash
        working-directory: .
        run: |
          if [ "${{ github.event.inputs.target }}" = "staging" ]; then
            echo "APP_ORIGIN=${STAGING_URL}" >> "$GITHUB_ENV"
            echo "app_origin=${STAGING_URL}" >> "$GITHUB_OUTPUT"
          else
            echo "APP_ORIGIN=${DEFAULT_LOCAL}" >> "$GITHUB_ENV"
            echo "app_origin=${DEFAULT_LOCAL}" >> "$GITHUB_OUTPUT"
          fi

      - name: Print effective target (debug)
        run: |
          echo "target=${{ github.event.inputs.target || 'localhost' }}"
          echo "APP_ORIGIN=$APP_ORIGIN"
          echo "LHCI_COLLECT__URL will be $APP_ORIGIN"

      - name: Install dependencies
        run: npm ci

      - name: Capture production audit report
        run: npm audit --omit=dev || true

      - name: Build production bundle
        if: ${{ github.event.inputs.target != 'staging' }}
        run: npm run build

      - name: Start Next.js server
        if: ${{ github.event.inputs.target != 'staging' }}
        shell: bash
        run: |
          mkdir -p .lighthouseci
          npm run start -- --hostname 127.0.0.1 --port "$APP_PORT" \
            > .lighthouseci/server.log 2>&1 &
          echo "Server PID: $!" >> .lighthouseci/server.log

      - name: Wait for server
        if: ${{ github.event.inputs.target != 'staging' }}
        shell: bash
        run: |
          TARGET_URL="${APP_ORIGIN%/}"
          MAX_ATTEMPTS=20
          TIMEOUT=60
          elapsed=0
          
          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            if curl --fail --silent --head --max-time 5 "$TARGET_URL"; then
              echo "✓ Server ready at $TARGET_URL after ${elapsed}s"
              exit 0
            fi
            
            # Exponential backoff: 1s, 2s, 4s, then cap at 5s
            wait_time=$((attempt < 3 ? 2**attempt : 5))
            echo "[$attempt/$MAX_ATTEMPTS] Server not ready, waiting ${wait_time}s..."
            sleep $wait_time
            elapsed=$((elapsed + wait_time))
            
            if [ $elapsed -ge $TIMEOUT ]; then
              echo "✗ Timeout: Server at $TARGET_URL not ready after ${elapsed}s" >&2
              exit 1
            fi
          done
          
          echo "✗ Server at $TARGET_URL not ready after $MAX_ATTEMPTS attempts" >&2
          exit 1

      - name: Check staging reachability
        id: ping
        if: ${{ github.event.inputs.target == 'staging' }}
        run: |
          if curl -Isf --max-time 8 "$APP_ORIGIN" >/dev/null; then
            echo "reachable=true" >> "$GITHUB_OUTPUT"
          else
            echo "reachable=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Note skip (staging unreachable)
        if: ${{ github.event.inputs.target == 'staging' && steps.ping.outputs.reachable != 'true' }}
        run: echo "Skipping LHCI; $APP_ORIGIN unreachable."

      - name: Run Lighthouse CI
        if: ${{ github.event.inputs.target != 'staging' || steps.ping.outputs.reachable == 'true' }}
        env:
          LHCI_COLLECT__URL: '["${{ steps.select.outputs.app_origin }}","${{ steps.select.outputs.app_origin }}/verse/John.3.16","${{ steps.select.outputs.app_origin }}/search"]'
        run: |
          npx --yes @lhci/cli@0.15.1 autorun --config ../../../lighthouserc.json

      - name: Summarize Lighthouse delta
        if: ${{ github.event.inputs.target != 'staging' || steps.ping.outputs.reachable == 'true' }}
        shell: bash
        run: |
          set -eo pipefail
          
          # Check if current manifest exists
          if [ ! -f .lighthouseci/manifest.json ]; then
            echo "⚠️ No manifest.json generated - LHCI may have failed" >&2
            echo "Check LHCI output above for errors" >&2
            exit 1
          fi
          
          # Check if baseline exists
          if [ ! -f ../../../.lighthouseci/baseline/manifest.json ]; then
            echo "⚠️ No baseline found - skipping comparison" | tee -a "$GITHUB_STEP_SUMMARY"
            echo "Run 'node scripts/lighthouse-init-baseline.mjs' to create baseline" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          
          # Run comparison
          node ../../../scripts/compare-lighthouse-baseline.mjs \
            ../../../.lighthouseci/baseline/manifest.json \
            .lighthouseci/manifest.json | tee -a "$GITHUB_STEP_SUMMARY"
          {
            echo "";
            echo "**Action items**";
            echo "- Document Lighthouse score deltas in your PR summary and capture hypotheses for any regressions.";
            echo "- Coordinate required load tests with infrastructure changes per [Performance Monitoring Policy](docs/performance.md).";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload Lighthouse artifacts
        if: always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v4
        with:
          name: lighthouse-results-${{ github.event.inputs.target || 'localhost' }}-${{ github.run_number }}
          path: theo/services/web/.lighthouseci
          if-no-files-found: warn
          retention-days: 30

      - name: Stop Next.js server
        if: ${{ always() && github.event.inputs.target != 'staging' }}
        shell: bash
        run: |
          pkill -f "next start" || true

