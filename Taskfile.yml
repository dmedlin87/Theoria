version: '3'

tasks:
  start_api:
    cmds:
      - poetry run uvicorn theo.services.api.app.bootstrap.app_factory:create_app --factory --reload --port 8000
    silent: true

  stop_api:
    cmds:
      - pkill -f "uvicorn .*theo.services.api.app.bootstrap.app_factory" || true
    silent: true

  architecture:test:
    desc: Run architecture enforcement tests
    cmds:
      - pytest tests/architecture -q

  architecture:imports:
    desc: Validate import boundaries with import-linter
    cmds:
      - lint-imports --config importlinter.ini

  architecture:graph:
    desc: Generate dependency graph artefacts for theo
    cmds:
      - mkdir -p dashboard/dependency-graph
      - python scripts/perf/generate_dependency_graph.py

  architecture:check:
    desc: Run all architecture boundary checks
    cmds:
      - task: architecture:test
      - task: architecture:imports

  test:fast:
    desc: Run the fast pytest suite without contract, GPU, or pgvector tests
    cmds:
      - pytest -m "not (slow or gpu or contract)"

  test:
    desc: Run pytest with automatic plugin detection
    cmds:
      - python run_tests.py

  test:parallel:
    desc: Run the pytest suite with automatic parallelisation
    cmds:
      - pytest -n=auto --dist=worksteal -m "not (slow or gpu or contract or pgvector)"

  test:sequential:
    desc: Run pytest sequentially with the default configuration
    cmds:
      - pytest -ra --strict-markers --durations=50 --durations-min=0.05

  test:incremental:
    desc: Run only the tests impacted by recent changes
    cmds:
      - python scripts/perf/incremental_test_runner.py --since {{.SINCE | default "HEAD~1"}}

  test:profile:
    desc: Execute pytest with duration profiling enabled
    cmds:
      - pytest --durations=0 --profile-svg tests/

  test:split:
    desc: Run pytest in split mode for CI matrix builds
    cmds:
      - pytest --splits={{.SPLITS | default 4}} --group={{.GROUP | default 1}}

  test:full:
    desc: Run the full pytest suite including pgvector and contract suites
    cmds:
      - pytest --schema --pgvector --contract

  test:slow-baseline:
    desc: Collect the slowest pytest tests and rerun them to build a flake baseline
    cmds:
      - poetry run python scripts/perf/slow_test_baseline.py

  test:validate-env:
    desc: Validate required pytest plugins are installed
    cmds:
      - python validate_test_env.py

  install:dev:
    desc: Install development dependencies
    cmds:
      - pip install -e ".[dev]"

  deps:lock:
    desc: Regenerate pip-compile lockfiles for all extras
    cmds:
      - pip-compile --resolver=backtracking --extra base --output-file constraints/base.txt pyproject.toml
      - pip-compile --resolver=backtracking --extra api --output-file constraints/api.txt pyproject.toml
      - pip-compile --resolver=backtracking --extra ml --output-file constraints/ml.txt pyproject.toml
      - pip-compile --resolver=backtracking --extra dev --output-file constraints/dev.txt pyproject.toml
