/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/ingest/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ingest File
         * @description Accept a file upload and synchronously process it into passages.
         */
        post: operations["ingest_file_ingest_file_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingest/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ingest Url */
        post: operations["ingest_url_ingest_url_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingest/simple": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Simple Ingest */
        post: operations["simple_ingest_ingest_simple_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingest/transcript": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ingest Transcript
         * @description Accept a transcript (and optional audio) and process it into passages.
         */
        post: operations["ingest_transcript_ingest_transcript_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Jobs */
        get: operations["list_jobs_jobs__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Job */
        get: operations["get_job_jobs__job_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/reparse/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enqueue Reparse Job
         * @description Queue a background reparse job for an existing document.
         */
        post: operations["enqueue_reparse_job_jobs_reparse__document_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/enrich/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enqueue Enrichment Job
         * @description Queue a metadata enrichment job for an existing document.
         */
        post: operations["enqueue_enrichment_job_jobs_enrich__document_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/refresh-hnsw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enqueue Refresh Hnsw Job
         * @description Queue a pgvector HNSW refresh and recall evaluation.
         */
        post: operations["enqueue_refresh_hnsw_job_jobs_refresh_hnsw_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/summaries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enqueue Summary Job
         * @description Queue a summary-generation job for an existing document.
         */
        post: operations["enqueue_summary_job_jobs_summaries_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/topic_digest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enqueue Topic Digest Job
         * @description Queue a background job that generates the topical activity digest.
         */
        post: operations["enqueue_topic_digest_job_jobs_topic_digest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/validate_citations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enqueue Citation Validation Job
         * @description Queue a background job to validate cached citation integrity.
         */
        post: operations["enqueue_citation_validation_job_jobs_validate_citations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/enqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enqueue Job
         * @description Enqueue a task with deterministic, idempotent responses.
         */
        post: operations["enqueue_job_jobs_enqueue_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search
         * @description Perform hybrid search over the indexed corpus.
         */
        get: operations["search_search__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export/deliverable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export Deliverable
         * @description Generate sermon or transcript deliverables under a unified schema.
         */
        post: operations["export_deliverable_export_deliverable_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export Search
         * @description Return export payload for hybrid search results or verse mentions.
         */
        get: operations["export_search_export_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export Documents Endpoint
         * @description Return documents and their passages for offline processing.
         */
        get: operations["export_documents_endpoint_export_documents_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/verses/{osis}/mentions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verse Mentions
         * @description Return all passages that reference the requested OSIS verse.
         */
        get: operations["verse_mentions_verses__osis__mentions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/verses/{osis}/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verse Timeline
         * @description Return aggregated mention counts grouped by the requested window.
         */
        get: operations["verse_timeline_verses__osis__timeline_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Document List
         * @description Return paginated documents.
         */
        get: operations["document_list_documents__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents/digest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Latest Digest Document
         * @description Return the most recently generated topic digest document.
         */
        get: operations["latest_digest_document_documents_digest_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Document Detail
         * @description Fetch a document with its metadata and passages.
         */
        get: operations["document_detail_documents__document_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Document Metadata
         * @description Update editable document metadata fields.
         */
        patch: operations["update_document_metadata_documents__document_id__patch"];
        trace?: never;
    };
    "/documents/{document_id}/passages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Document Passages
         * @description Return paginated passages for a given document.
         */
        get: operations["document_passages_documents__document_id__passages_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents/{document_id}/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Document Annotations
         * @description Return annotations attached to the document.
         */
        get: operations["document_annotations_documents__document_id__annotations_get"];
        put?: never;
        /**
         * Create Document Annotation
         * @description Create a new annotation for a document.
         */
        post: operations["create_document_annotation_documents__document_id__annotations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents/{document_id}/annotations/{annotation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Document Annotation
         * @description Delete a document annotation.
         */
        delete: operations["delete_document_annotation_documents__document_id__annotations__annotation_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List enabled feature flags */
        get: operations["list_features_features__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features/discovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Structured discovery metadata */
        get: operations["discovery_features_discovery_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/scripture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Scripture */
        get: operations["get_scripture_research_scripture_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/crossrefs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Crossrefs */
        get: operations["get_crossrefs_research_crossrefs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/variants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Variants */
        get: operations["get_variants_research_variants_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/dss-links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Dss Links */
        get: operations["get_dss_links_research_dss_links_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Reliability Overview */
        get: operations["get_reliability_overview_research_overview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/morphology": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Morphology */
        get: operations["get_morphology_research_morphology_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Notes */
        get: operations["list_notes_research_notes_get"];
        put?: never;
        /** Create Note */
        post: operations["create_note_research_notes_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/historicity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Historicity */
        get: operations["get_historicity_research_historicity_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/notes/{note_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Note */
        delete: operations["delete_note_research_notes__note_id__delete"];
        options?: never;
        head?: never;
        /** Patch Note */
        patch: operations["patch_note_research_notes__note_id__patch"];
        trace?: never;
    };
    "/research/fallacies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Detect Fallacies */
        post: operations["detect_fallacies_research_fallacies_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Build Report */
        post: operations["build_report_research_report_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/contradictions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Contradictions */
        get: operations["list_contradictions_research_contradictions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/commentaries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Commentaries */
        get: operations["list_commentaries_research_commentaries_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/geo/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lookup Geo */
        get: operations["lookup_geo_research_geo_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/research/geo/verse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lookup Geo For Verse */
        get: operations["lookup_geo_for_verse_research_geo_verse_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Creators Route */
        get: operations["search_creators_route_creators_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/{creator_id}/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Creator Topic Profile */
        get: operations["get_creator_topic_profile_creators__creator_id__topics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/verses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Creator Verse Perspectives */
        get: operations["list_creator_verse_perspectives_creators_verses_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/creators/verses/{osis}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Creator Verse Perspectives */
        get: operations["get_creator_verse_perspectives_creators_verses__osis__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transcripts/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search Transcripts */
        get: operations["search_transcripts_transcripts_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trails/{trail_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Trail */
        get: operations["get_trail_trails__trail_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trails/{trail_id}/replay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Replay Trail */
        post: operations["replay_trail_trails__trail_id__replay_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/telemetry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ingest Client Telemetry
         * @description Accept batched telemetry measurements emitted by the client.
         */
        post: operations["ingest_client_telemetry_analytics_telemetry_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analytics/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ingest Feedback Event
         * @description Persist structured user feedback events for downstream analysis.
         */
        post: operations["ingest_feedback_event_analytics_feedback_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Ai Features
         * @description Expose guardrail catalogues for client selection.
         */
        get: operations["list_ai_features_ai_features_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/citations/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export Citations
         * @description Return CSL-JSON and manager payloads for the supplied citations.
         */
        post: operations["export_citations_ai_citations_export_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/llm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Llm Models */
        get: operations["list_llm_models_ai_llm_get"];
        put?: never;
        /** Register Llm Model */
        post: operations["register_llm_model_ai_llm_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/llm/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Set Default Llm Model */
        patch: operations["set_default_llm_model_ai_llm_default_patch"];
        trace?: never;
    };
    "/ai/llm/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove Llm Model */
        delete: operations["remove_llm_model_ai_llm__name__delete"];
        options?: never;
        head?: never;
        /** Update Llm Model */
        patch: operations["update_llm_model_ai_llm__name__patch"];
        trace?: never;
    };
    "/ai/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Chat Turn */
        post: operations["chat_turn_ai_chat_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/chat/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Chat Session */
        get: operations["get_chat_session_ai_chat__session_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/chat/{session_id}/goals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Chat Goals */
        get: operations["list_chat_goals_ai_chat__session_id__goals_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/chat/{session_id}/goals/{goal_id}/close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Close Chat Goal */
        post: operations["close_chat_goal_ai_chat__session_id__goals__goal_id__close_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/chat/{session_id}/goals/{goal_id}/priority": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update Goal Priority */
        post: operations["update_goal_priority_ai_chat__session_id__goals__goal_id__priority_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/verse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verse Copilot */
        post: operations["verse_copilot_ai_verse_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/sermon-prep": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sermon Prep */
        post: operations["sermon_prep_ai_sermon_prep_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/sermon-prep/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sermon Prep Export */
        post: operations["sermon_prep_export_ai_sermon_prep_export_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/transcript/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transcript Export */
        post: operations["transcript_export_ai_transcript_export_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/comparative": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Comparative Analysis */
        post: operations["comparative_analysis_ai_comparative_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/multimedia": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Multimedia Digest */
        post: operations["multimedia_digest_ai_multimedia_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/devotional": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Devotional Flow */
        post: operations["devotional_flow_ai_devotional_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/collaboration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Collaboration */
        post: operations["collaboration_ai_collaboration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/curation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Corpus Curation */
        post: operations["corpus_curation_ai_curation_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/digest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Topic Digest
         * @description Return the cached digest, generating it if missing.
         */
        get: operations["get_topic_digest_ai_digest_get"];
        put?: never;
        /**
         * Refresh Topic Digest
         * @description Regenerate the digest for the requested lookback window.
         */
        post: operations["refresh_topic_digest_ai_digest_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/digest/watchlists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List User Watchlists */
        get: operations["list_user_watchlists_ai_digest_watchlists_get"];
        put?: never;
        /** Create User Watchlist */
        post: operations["create_user_watchlist_ai_digest_watchlists_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/digest/watchlists/{watchlist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete User Watchlist */
        delete: operations["delete_user_watchlist_ai_digest_watchlists__watchlist_id__delete"];
        options?: never;
        head?: never;
        /** Update User Watchlist */
        patch: operations["update_user_watchlist_ai_digest_watchlists__watchlist_id__patch"];
        trace?: never;
    };
    "/ai/digest/watchlists/{watchlist_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List User Watchlist Events */
        get: operations["list_user_watchlist_events_ai_digest_watchlists__watchlist_id__events_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/digest/watchlists/{watchlist_id}/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Preview User Watchlist */
        get: operations["preview_user_watchlist_ai_digest_watchlists__watchlist_id__preview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/digest/watchlists/{watchlist_id}/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run User Watchlist */
        post: operations["run_user_watchlist_ai_digest_watchlists__watchlist_id__run_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/ai/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Providers */
        get: operations["list_providers_settings_ai_providers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/ai/providers/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Provider Settings */
        get: operations["get_provider_settings_settings_ai_providers__provider__get"];
        /** Upsert Provider Settings */
        put: operations["upsert_provider_settings_settings_ai_providers__provider__put"];
        post?: never;
        /** Delete Provider Settings */
        delete: operations["delete_provider_settings_settings_ai_providers__provider__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Metrics Endpoint */
        get: operations["metrics_endpoint_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AIFeaturesResponse */
        AIFeaturesResponse: {
            guardrails: components["schemas"]["GuardrailSettings"];
        };
        /** AgentStep */
        AgentStep: {
            /** Id */
            id: string;
            /** Trail Id */
            trail_id: string;
            /** Step Index */
            step_index: number;
            /** Tool */
            tool: string;
            /** Action */
            action?: string | null;
            /** Status */
            status: string;
            /** Input Payload */
            input_payload?: unknown | null;
            /** Output Payload */
            output_payload?: unknown | null;
            /** Output Digest */
            output_digest?: string | null;
            /** Tokens In */
            tokens_in?: number | null;
            /** Tokens Out */
            tokens_out?: number | null;
            /** Error Message */
            error_message?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Completed At */
            completed_at?: string | null;
        };
        /** AgentTrail */
        AgentTrail: {
            /** Id */
            id: string;
            /** Workflow */
            workflow: string;
            /** Mode */
            mode?: string | null;
            /** User Id */
            user_id?: string | null;
            /** Status */
            status: string;
            /** Plan Md */
            plan_md?: string | null;
            /** Final Md */
            final_md?: string | null;
            /** Input Payload */
            input_payload?: unknown | null;
            /** Output Payload */
            output_payload?: unknown | null;
            /** Error Message */
            error_message?: string | null;
            /**
             * Started At
             * Format: date-time
             */
            started_at: string;
            /** Completed At */
            completed_at?: string | null;
            /** Last Replayed At */
            last_replayed_at?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Steps */
            steps?: components["schemas"]["AgentStep"][];
            /** Sources */
            sources?: components["schemas"]["TrailSource"][];
        };
        /** Body_ingest_file_ingest_file_post */
        Body_ingest_file_ingest_file_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
            /** Frontmatter */
            frontmatter?: string | null;
        };
        /** Body_ingest_transcript_ingest_transcript_post */
        Body_ingest_transcript_ingest_transcript_post: {
            /**
             * Transcript
             * Format: binary
             */
            transcript: string;
            /** Audio */
            audio?: string | null;
            /** Frontmatter */
            frontmatter?: string | null;
        };
        /** ChatMemoryEntry */
        ChatMemoryEntry: {
            /** Question */
            question: string;
            /** Answer */
            answer: string;
            /** Prompt */
            prompt?: string | null;
            /** Intent Tags */
            intent_tags?: components["schemas"]["IntentTagPayload"][] | null;
            /** Answer Summary */
            answer_summary?: string | null;
            /** Citations */
            citations?: components["schemas"]["RAGCitation-Output"][];
            /** Document Ids */
            document_ids?: string[];
            /** Goal Id */
            goal_id?: string | null;
            /** Trail Id */
            trail_id?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** ChatSessionMessage */
        ChatSessionMessage: {
            /**
             * Role
             * @enum {string}
             */
            role: "user" | "assistant" | "system";
            /** Content */
            content: string;
        };
        /** ChatSessionPreferences */
        ChatSessionPreferences: {
            /** Mode */
            mode?: string | null;
            default_filters?: components["schemas"]["HybridSearchFilters"] | null;
            /** Frequently Opened Panels */
            frequently_opened_panels?: string[];
        };
        /** ChatGoalState */
        ChatGoalState: {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /** Trail Id */
            trail_id: string;
            /**
             * Status
             * @enum {string}
             */
            status: "active" | "closed";
            /** Priority */
            priority: number;
            /** Summary */
            summary?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Last Interaction At
             * Format: date-time
             */
            last_interaction_at: string;
        };
        /** ChatGoalProgress */
        ChatGoalProgress: {
            /** Goals */
            goals?: components["schemas"]["ChatGoalState"][];
        };
        /** GoalPriorityUpdateRequest */
        GoalPriorityUpdateRequest: {
            /** Priority */
            priority: number;
        };
        /** GoalCloseRequest */
        GoalCloseRequest: {
            /** Summary */
            summary?: string | null;
        };
        /** ChatSessionRequest */
        ChatSessionRequest: {
            /** Messages */
            messages: components["schemas"]["ChatSessionMessage"][];
            /** Session Id */
            session_id?: string | null;
            /** Model */
            model?: string | null;
            /** Prompt */
            prompt?: string | null;
            /** Osis */
            osis?: string | null;
            filters?: components["schemas"]["HybridSearchFilters"];
            recorder_metadata?: components["schemas"]["RecorderMetadata"] | null;
            /** Stance */
            stance?: string | null;
            /** Mode Id */
            mode_id?: string | null;
            preferences?: components["schemas"]["ChatSessionPreferences"] | null;
        };
        /** ChatSessionResponse */
        ChatSessionResponse: {
            /** Session Id */
            session_id: string;
            message: components["schemas"]["ChatSessionMessage"];
            answer: components["schemas"]["RAGAnswer"];
            /** Intent Tags */
            intent_tags?: components["schemas"]["IntentTagPayload"][] | null;
        };
        /** ChatSessionState */
        ChatSessionState: {
            /** Session Id */
            session_id: string;
            /** Stance */
            stance?: string | null;
            /** Summary */
            summary?: string | null;
            /** Document Ids */
            document_ids?: string[];
            preferences?: components["schemas"]["ChatSessionPreferences"] | null;
            /** Memory */
            memory?: components["schemas"]["ChatMemoryEntry"][];
            /** Goals */
            goals?: components["schemas"]["ChatGoalState"][];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /**
             * Last Interaction At
             * Format: date-time
             */
            last_interaction_at: string;
        };
        /**
         * CitationExportRequest
         * @description Request payload for exporting citations used by the copilot.
         */
        CitationExportRequest: {
            /** Citations */
            citations: components["schemas"]["RAGCitation-Input"][];
        };
        /**
         * CitationExportResponse
         * @description Response describing the rendered citation export bundle.
         */
        CitationExportResponse: {
            manifest: components["schemas"]["ExportManifest"];
            /** Records */
            records: {
                [key: string]: unknown;
            }[];
            /** Csl */
            csl: {
                [key: string]: unknown;
            }[];
            /** Manager Payload */
            manager_payload: {
                [key: string]: unknown;
            };
        };
        /** CitationValidationJobRequest */
        CitationValidationJobRequest: {
            /**
             * Limit
             * @default 25
             */
            limit: number;
        };
        /** CollaborationRequest */
        CollaborationRequest: {
            /** Thread */
            thread: string;
            /** Osis */
            osis: string;
            /** Viewpoints */
            viewpoints: string[];
            /** Model */
            model?: string | null;
        };
        /** CommentaryExcerptItem */
        CommentaryExcerptItem: {
            /** Id */
            id: string;
            /** Osis */
            osis: string;
            /** Title */
            title?: string | null;
            /** Excerpt */
            excerpt: string;
            /** Source */
            source?: string | null;
            /** Perspective */
            perspective?: string | null;
            /** Tags */
            tags?: string[] | null;
        };
        /** CommentarySearchResponse */
        CommentarySearchResponse: {
            /** Osis */
            osis: string;
            /** Items */
            items?: components["schemas"]["CommentaryExcerptItem"][];
            /**
             * Total
             * @default 0
             */
            total: number;
        };
        /** ComparativeAnalysisRequest */
        ComparativeAnalysisRequest: {
            /** Osis */
            osis: string;
            /** Participants */
            participants: string[];
            /** Model */
            model?: string | null;
        };
        /** ContradictionItem */
        ContradictionItem: {
            /** Id */
            id: string;
            /** Osis A */
            osis_a: string;
            /** Osis B */
            osis_b: string;
            /** Summary */
            summary?: string | null;
            /** Source */
            source?: string | null;
            /** Tags */
            tags?: string[] | null;
            /**
             * Weight
             * @default 1
             */
            weight: number;
            /** Perspective */
            perspective?: string | null;
        };
        /** ContradictionSearchResponse */
        ContradictionSearchResponse: {
            /** Items */
            items?: components["schemas"]["ContradictionItem"][];
        };
        /** CorpusCurationRequest */
        CorpusCurationRequest: {
            /** Since */
            since?: string | null;
        };
        /** CreatorSearchResponse */
        CreatorSearchResponse: {
            /** Query */
            query: string | null;
            /** Results */
            results: components["schemas"]["CreatorSummary"][];
        };
        /** CreatorSummary */
        CreatorSummary: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Channel */
            channel?: string | null;
            /** Tags */
            tags?: string[] | null;
        };
        /** CreatorTopicProfile */
        CreatorTopicProfile: {
            /** Creator Id */
            creator_id: string;
            /** Creator Name */
            creator_name: string;
            /** Topic */
            topic: string;
            /** Stance */
            stance?: string | null;
            /** Confidence */
            confidence?: number | null;
            /** Quotes */
            quotes: components["schemas"]["CreatorTopicQuote"][];
            /** Claim Summaries */
            claim_summaries: string[];
            /** Total Claims */
            total_claims: number;
        };
        /** CreatorTopicQuote */
        CreatorTopicQuote: {
            /** Segment Id */
            segment_id: string;
            /** Quote */
            quote: string;
            /** Osis Refs */
            osis_refs?: string[] | null;
            /** Source Ref */
            source_ref?: string | null;
            /** Video Id */
            video_id?: string | null;
            /** Video Title */
            video_title?: string | null;
            /** Video Url */
            video_url?: string | null;
            /** T Start */
            t_start?: number | null;
            /** T End */
            t_end?: number | null;
        };
        /** CreatorVersePerspectiveCreator */
        CreatorVersePerspectiveCreator: {
            /** Creator Id */
            creator_id: string;
            /** Creator Name */
            creator_name: string;
            /** Stance */
            stance?: string | null;
            /** Confidence */
            confidence?: number | null;
            /** Claim Count */
            claim_count: number;
            /** Stance Distribution */
            stance_distribution?: {
                [key: string]: number;
            } | null;
            /** Quotes */
            quotes: components["schemas"]["VersePerspectiveQuote"][];
        };
        /** CreatorVersePerspectiveMeta */
        CreatorVersePerspectiveMeta: {
            /** Range */
            range: string;
            /**
             * Generated At
             * Format: date-time
             */
            generated_at: string;
        };
        /** CreatorVersePerspectiveResponse */
        CreatorVersePerspectiveResponse: {
            /** Osis */
            osis: string;
            /** Total Creators */
            total_creators: number;
            /** Creators */
            creators: components["schemas"]["CreatorVersePerspectiveCreator"][];
            meta?: components["schemas"]["CreatorVersePerspectiveMeta"] | null;
        };
        /** CrossReference */
        CrossReference: {
            /** Source */
            source: string;
            /** Target */
            target: string;
            /** Weight */
            weight?: number | null;
            /** Relation Type */
            relation_type?: string | null;
            /** Summary */
            summary?: string | null;
            /** Dataset */
            dataset?: string | null;
        };
        /** CrossReferenceResponse */
        CrossReferenceResponse: {
            /** Osis */
            osis: string;
            /** Results */
            results: components["schemas"]["CrossReference"][];
            /** Total */
            total: number;
        };
        /**
         * DeliverableDownload
         * @description Metadata describing a persisted deliverable artifact.
         */
        DeliverableDownload: {
            /**
             * Format
             * @enum {string}
             */
            format: "markdown" | "ndjson" | "csv" | "pdf";
            /** Filename */
            filename: string;
            /** Media Type */
            media_type: string;
            /** Storage Path */
            storage_path: string;
            /** Public Url */
            public_url?: string | null;
            /** Signed Url */
            signed_url?: string | null;
            /** Size Bytes */
            size_bytes?: number | null;
        };
        /**
         * DeliverableManifest
         * @description Metadata describing an export-ready deliverable payload.
         */
        DeliverableManifest: {
            /** Export Id */
            export_id: string;
            /** Schema Version */
            schema_version: string;
            /**
             * Generated At
             * Format: date-time
             */
            generated_at: string;
            /**
             * Type
             * @enum {string}
             */
            type: "sermon" | "transcript";
            /** Filters */
            filters?: {
                [key: string]: unknown;
            };
            /** Git Sha */
            git_sha?: string | null;
            /** Model Preset */
            model_preset?: string | null;
            /** Sources */
            sources?: string[];
        };
        /**
         * DeliverableRequest
         * @description Parameters accepted by the deliverable export endpoint.
         */
        DeliverableRequest: {
            /**
             * Type
             * @enum {string}
             */
            type: "sermon" | "transcript";
            /** Formats */
            formats?: ("markdown" | "ndjson" | "csv" | "pdf")[];
            /** Topic */
            topic?: string | null;
            /** Osis */
            osis?: string | null;
            filters?: components["schemas"]["HybridSearchFilters"];
            /** Model */
            model?: string | null;
            /** Document Id */
            document_id?: string | null;
        };
        /**
         * DeliverableResponse
         * @description API response describing an export deliverable job result.
         */
        DeliverableResponse: {
            /** Export Id */
            export_id: string;
            /**
             * Status
             * @enum {string}
             */
            status: "queued" | "processing" | "completed" | "failed";
            manifest?: components["schemas"]["DeliverableManifest"] | null;
            /** Manifest Path */
            manifest_path?: string | null;
            /** Job Id */
            job_id?: string | null;
            /** Assets */
            assets: components["schemas"]["DeliverableDownload"][];
            /** Message */
            message?: string | null;
        };
        /** DevotionalRequest */
        DevotionalRequest: {
            /** Osis */
            osis: string;
            /**
             * Focus
             * @default reflection
             */
            focus: string;
            /** Model */
            model?: string | null;
        };
        /** DocumentAnnotationCreate */
        DocumentAnnotationCreate: {
            /**
             * Type
             * @description Structured annotation type
             */
            type?: ("claim" | "evidence" | "question" | "note") | null;
            /**
             * Text
             * @description Primary text body for the annotation
             */
            text?: string | null;
            /**
             * Stance
             * @description Optional stance label for the annotation
             */
            stance?: string | null;
            /**
             * Passage Ids
             * @description Passage identifiers referenced by this annotation
             */
            passage_ids?: string[];
            /**
             * Group Id
             * @description Shared identifier to link related annotations
             */
            group_id?: string | null;
            /**
             * Metadata
             * @description Arbitrary structured metadata for the annotation
             */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Body
             * @description Legacy free-form annotation text (alias for text)
             */
            body?: string | null;
        };
        /** DocumentAnnotationResponse */
        DocumentAnnotationResponse: {
            /** Id */
            id: string;
            /** Document Id */
            document_id: string;
            /**
             * Type
             * @enum {string}
             */
            type: "claim" | "evidence" | "question" | "note";
            /** Body */
            body: string;
            /** Stance */
            stance?: string | null;
            /** Passage Ids */
            passage_ids?: string[];
            /** Group Id */
            group_id?: string | null;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /** Raw */
            raw?: {
                [key: string]: unknown;
            } | null;
            /**
             * Legacy
             * @default false
             */
            legacy: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** DocumentDetailResponse */
        DocumentDetailResponse: {
            /** Id */
            id: string;
            /** Title */
            title?: string | null;
            /** Source Type */
            source_type?: string | null;
            /** Collection */
            collection?: string | null;
            /** Authors */
            authors?: string[] | null;
            /** Doi */
            doi?: string | null;
            /** Venue */
            venue?: string | null;
            /** Year */
            year?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Provenance Score */
            provenance_score?: number | null;
            /** Source Url */
            source_url?: string | null;
            /** Channel */
            channel?: string | null;
            /** Video Id */
            video_id?: string | null;
            /** Duration Seconds */
            duration_seconds?: number | null;
            /** Storage Path */
            storage_path?: string | null;
            /** Abstract */
            abstract?: string | null;
            /** Topics */
            topics?: {
                [key: string]: unknown;
            } | string[] | null;
            /** Enrichment Version */
            enrichment_version?: number | null;
            /** Primary Topic */
            primary_topic?: string | null;
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
            /** Passages */
            passages?: components["schemas"]["Passage"][];
            /** Annotations */
            annotations?: components["schemas"]["DocumentAnnotationResponse"][];
        };
        /** DocumentIngestResponse */
        DocumentIngestResponse: {
            /** Document Id */
            document_id: string;
            /** Status */
            status: string;
        };
        /** DocumentListResponse */
        DocumentListResponse: {
            /** Items */
            items: components["schemas"]["DocumentSummary"][];
            /** Total */
            total: number;
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
        };
        /** DocumentPassagesResponse */
        DocumentPassagesResponse: {
            /** Document Id */
            document_id: string;
            /** Passages */
            passages: components["schemas"]["Passage"][];
            /** Total */
            total: number;
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
        };
        /** DocumentSummary */
        DocumentSummary: {
            /** Id */
            id: string;
            /** Title */
            title?: string | null;
            /** Source Type */
            source_type?: string | null;
            /** Collection */
            collection?: string | null;
            /** Authors */
            authors?: string[] | null;
            /** Doi */
            doi?: string | null;
            /** Venue */
            venue?: string | null;
            /** Year */
            year?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Provenance Score */
            provenance_score?: number | null;
        };
        /** DocumentUpdateRequest */
        DocumentUpdateRequest: {
            /** Title */
            title?: string | null;
            /** Collection */
            collection?: string | null;
            /** Authors */
            authors?: string[] | null;
            /** Source Type */
            source_type?: string | null;
            /** Abstract */
            abstract?: string | null;
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** DssLink */
        DssLink: {
            /** Id */
            id: string;
            /** Osis */
            osis: string;
            /** Title */
            title: string;
            /** Url */
            url: string;
            /** Fragment */
            fragment?: string | null;
            /** Summary */
            summary?: string | null;
            /** Dataset */
            dataset?: string | null;
        };
        /** DssLinksResponse */
        DssLinksResponse: {
            /** Osis */
            osis: string;
            /** Links */
            links?: components["schemas"]["DssLink"][];
            /** Total */
            total: number;
        };
        /**
         * ExportDeliverableResponse
         * @description Serialized payload returned by the sermon and transcript export presets.
         */
        ExportDeliverableResponse: {
            /**
             * Preset
             * @enum {string}
             */
            preset: "sermon-markdown" | "sermon-ndjson" | "sermon-csv" | "sermon-pdf" | "transcript-markdown" | "transcript-csv" | "transcript-pdf";
            /**
             * Format
             * @enum {string}
             */
            format: "markdown" | "ndjson" | "csv" | "pdf";
            /** Filename */
            filename: string;
            /** Media Type */
            media_type: string;
            /** Content */
            content: string;
        };
        /**
         * ExportManifest
         * @description Common metadata written alongside exported records.
         */
        ExportManifest: {
            /** Export Id */
            export_id: string;
            /** Schema Version */
            schema_version: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Type
             * @enum {string}
             */
            type: "search" | "documents";
            /** Filters */
            filters: {
                [key: string]: unknown;
            };
            /** Totals */
            totals: {
                [key: string]: number;
            };
            /** App Git Sha */
            app_git_sha?: string | null;
            /** Enrichment Version */
            enrichment_version?: number | null;
            /** Cursor */
            cursor?: string | null;
            /** Next Cursor */
            next_cursor?: string | null;
            /** Mode */
            mode?: string | null;
        };
        /** FallacyDetectRequest */
        FallacyDetectRequest: {
            /** Text */
            text: string;
            /**
             * Min Confidence
             * @default 0
             */
            min_confidence: number;
        };
        /** FallacyDetectResponse */
        FallacyDetectResponse: {
            /** Text */
            text: string;
            /** Detections */
            detections?: components["schemas"]["FallacyDetection"][];
            /** Total */
            total: number;
        };
        /** FallacyDetection */
        FallacyDetection: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Category */
            category: string;
            /** Description */
            description: string;
            /** Severity */
            severity?: string | null;
            /** Confidence */
            confidence: number;
            /** Matches */
            matches?: string[];
        };
        /**
         * FeedbackEventPayload
         * @description Request body describing a user feedback interaction.
         */
        FeedbackEventPayload: {
            /**
             * Action
             * @description Categorical label describing the feedback interaction.
             */
            action: string;
            /**
             * User Id
             * @description Identifier of the user submitting the feedback, if available.
             */
            user_id?: string | null;
            /**
             * Chat Session Id
             * @description Associated conversational session identifier, when relevant.
             */
            chat_session_id?: string | null;
            /**
             * Query
             * @description Original user query or prompt that produced this feedback event.
             */
            query?: string | null;
            /**
             * Document Id
             * @description Identifier of the cited document involved in the interaction.
             */
            document_id?: string | null;
            /**
             * Passage Id
             * @description Identifier of the cited passage involved in the interaction.
             */
            passage_id?: string | null;
            /**
             * Rank
             * @description Zero-based rank of the cited item within the retrieval results.
             */
            rank?: number | null;
            /**
             * Score
             * @description Retrieval score for the cited item, if available.
             */
            score?: number | null;
            /**
             * Confidence
             * @description System confidence assigned to the citation, when supplied.
             */
            confidence?: number | null;
        };
        /** GeoAttribution */
        GeoAttribution: {
            /** Source */
            source: string;
            /** Url */
            url: string;
            /** License */
            license: string;
            /** Commit Sha */
            commit_sha?: string | null;
            /**
             * Osm Required
             * @default false
             */
            osm_required: boolean;
        };
        /** GeoLocationItem */
        GeoLocationItem: {
            /** Modern Id */
            modern_id: string;
            /** Friendly Id */
            friendly_id: string;
            /** Latitude */
            latitude?: number | null;
            /** Longitude */
            longitude?: number | null;
            /** Geom Kind */
            geom_kind?: string | null;
            /** Confidence */
            confidence?: number | null;
            /** Names */
            names?: string[] | null;
            /** Geometry */
            geometry?: {
                [key: string]: unknown;
            } | null;
            /** Raw */
            raw?: {
                [key: string]: unknown;
            } | null;
        };
        /** GeoPlaceItem */
        GeoPlaceItem: {
            /** Modern Id */
            modern_id: string;
            /** Name */
            name: string;
            /** Slug */
            slug?: string | null;
            /** Lat */
            lat?: number | null;
            /** Lng */
            lng?: number | null;
            /** Geom Kind */
            geom_kind?: string | null;
            /** Confidence */
            confidence?: number | null;
            /** Aliases */
            aliases?: string[] | null;
            /** Sources */
            sources?: {
                [key: string]: unknown;
            } | {
                [key: string]: unknown;
            }[] | null;
        };
        /** GeoPlaceOccurrence */
        GeoPlaceOccurrence: {
            /** Ancient Id */
            ancient_id: string;
            /** Friendly Id */
            friendly_id: string;
            /** Classification */
            classification?: string | null;
            /** Osis Refs */
            osis_refs?: string[];
            /** Modern Locations */
            modern_locations?: components["schemas"]["GeoLocationItem"][];
            /** Raw */
            raw?: {
                [key: string]: unknown;
            } | null;
        };
        /** GeoPlaceSearchResponse */
        GeoPlaceSearchResponse: {
            /** Items */
            items?: components["schemas"]["GeoPlaceItem"][];
        };
        /** GeoVerseResponse */
        GeoVerseResponse: {
            /** Osis */
            osis: string;
            /** Places */
            places?: components["schemas"]["GeoPlaceOccurrence"][];
            attribution?: components["schemas"]["GeoAttribution"] | null;
        };
        /** GuardrailProfile */
        GuardrailProfile: {
            /** Slug */
            slug: string;
            /** Label */
            label: string;
            /** Description */
            description?: string | null;
        };
        /** GuardrailSettings */
        GuardrailSettings: {
            /** Theological Traditions */
            theological_traditions: components["schemas"]["GuardrailProfile"][];
            /** Topic Domains */
            topic_domains: components["schemas"]["GuardrailProfile"][];
        };
        /** HNSWRefreshJobRequest */
        HNSWRefreshJobRequest: {
            /**
             * Sample Queries
             * @default 25
             */
            sample_queries: number;
            /**
             * Top K
             * @default 10
             */
            top_k: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HistoricityEntry */
        HistoricityEntry: {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /** Authors */
            authors?: string[];
            /** Year */
            year?: number | null;
            /** Summary */
            summary?: string | null;
            /** Source */
            source?: string | null;
            /** Url */
            url?: string | null;
            /** Tags */
            tags?: string[];
            /** Score */
            score: number;
        };
        /** HistoricitySearchResponse */
        HistoricitySearchResponse: {
            /** Query */
            query: string;
            /** Results */
            results?: components["schemas"]["HistoricityEntry"][];
            /** Total */
            total: number;
        };
        /** HybridSearchFilters */
        HybridSearchFilters: {
            /** Collection */
            collection?: string | null;
            /** Author */
            author?: string | null;
            /** Source Type */
            source_type?: string | null;
            /** Theological Tradition */
            theological_tradition?: string | null;
            /** Topic Domain */
            topic_domain?: string | null;
        };
        /** HybridSearchResponse */
        HybridSearchResponse: {
            /** Query */
            query?: string | null;
            /** Osis */
            osis?: string | null;
            /** Results */
            results: components["schemas"]["HybridSearchResult"][];
            /** Debug */
            debug?: {
                [key: string]: unknown;
            } | null;
        };
        /** HybridSearchResult */
        HybridSearchResult: {
            /** Id */
            id: string;
            /** Document Id */
            document_id: string;
            /** Text */
            text: string;
            /** Osis Ref */
            osis_ref?: string | null;
            /** Start Char */
            start_char?: number | null;
            /** End Char */
            end_char?: number | null;
            /** Page No */
            page_no?: number | null;
            /** T Start */
            t_start?: number | null;
            /** T End */
            t_end?: number | null;
            /**
             * Score
             * @description Optional retrieval score
             */
            score?: number | null;
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
            /** Document Title */
            document_title?: string | null;
            /** Snippet */
            snippet: string;
            /** Rank */
            rank: number;
            /** Highlights */
            highlights?: string[] | null;
            /** Document Score */
            document_score?: number | null;
            /** Document Rank */
            document_rank?: number | null;
            /** Lexical Score */
            lexical_score?: number | null;
            /** Vector Score */
            vector_score?: number | null;
            /** Osis Distance */
            osis_distance?: number | null;
        };
        /** IntentTagPayload */
        IntentTagPayload: {
            /** Intent */
            intent: string;
            /** Stance */
            stance?: string | null;
            /** Confidence */
            confidence?: number | null;
        };
        /** JobEnqueueRequest */
        JobEnqueueRequest: {
            /** Task */
            task: string;
            /** Args */
            args?: {
                [key: string]: unknown;
            } | null;
            /** Schedule At */
            schedule_at?: string | null;
        };
        /** JobEnqueueResponse */
        JobEnqueueResponse: {
            /** Job Id */
            job_id: string;
            /** Task */
            task: string;
            /** Args Hash */
            args_hash: string;
            /**
             * Queued At
             * Format: date-time
             */
            queued_at: string;
            /** Schedule At */
            schedule_at?: string | null;
            /** Status Url */
            status_url: string;
        };
        /** JobListResponse */
        JobListResponse: {
            /** Jobs */
            jobs: components["schemas"]["JobStatus"][];
        };
        /** JobQueuedResponse */
        JobQueuedResponse: {
            /** Document Id */
            document_id: string;
            /** Status */
            status: string;
        };
        /** JobStatus */
        JobStatus: {
            /** Id */
            id: string;
            /** Document Id */
            document_id?: string | null;
            /** Job Type */
            job_type: string;
            /** Status */
            status: string;
            /** Task Id */
            task_id?: string | null;
            /** Error */
            error?: string | null;
            /** Payload */
            payload?: {
                [key: string]: unknown;
            } | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** LLMDefaultRequest */
        LLMDefaultRequest: {
            /** Name */
            name: string;
        };
        /** LLMModelRequest */
        LLMModelRequest: {
            /** Name */
            name: string;
            /**
             * Provider
             * @default openai
             */
            provider: string;
            /** Model */
            model: string;
            /** Config */
            config?: {
                [key: string]: unknown;
            };
            /** Pricing */
            pricing?: {
                [key: string]: number;
            };
            /** Latency */
            latency?: {
                [key: string]: number;
            };
            /** Routing */
            routing?: {
                [key: string]: unknown;
            };
            /**
             * Make Default
             * @default false
             */
            make_default: boolean;
        };
        /** LLMModelUpdateRequest */
        LLMModelUpdateRequest: {
            /** Provider */
            provider?: string | null;
            /** Model */
            model?: string | null;
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
            /** Pricing */
            pricing?: {
                [key: string]: number;
            } | null;
            /** Latency */
            latency?: {
                [key: string]: number;
            } | null;
            /** Routing */
            routing?: {
                [key: string]: unknown;
            } | null;
            /** Make Default */
            make_default?: boolean | null;
        };
        /** LLMSettingsResponse */
        LLMSettingsResponse: {
            /** Default Model */
            default_model: string | null;
            /** Models */
            models: {
                [key: string]: unknown;
            }[];
        };
        /** MorphToken */
        MorphToken: {
            /** Osis */
            osis: string;
            /** Surface */
            surface: string;
            /** Lemma */
            lemma?: string | null;
            /** Morph */
            morph?: string | null;
            /** Gloss */
            gloss?: string | null;
            /** Position */
            position?: number | null;
        };
        /** MorphologyResponse */
        MorphologyResponse: {
            /** Osis */
            osis: string;
            /** Tokens */
            tokens: components["schemas"]["MorphToken"][];
        };
        /** MultimediaDigestRequest */
        MultimediaDigestRequest: {
            /** Collection */
            collection?: string | null;
            /** Model */
            model?: string | null;
        };
        /** NoteEvidence */
        NoteEvidence: {
            /** Id */
            id: string;
            /** Source Type */
            source_type?: string | null;
            /** Source Ref */
            source_ref?: string | null;
            /** Osis Refs */
            osis_refs?: string[] | null;
            /** Citation */
            citation?: string | null;
            /** Snippet */
            snippet?: string | null;
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** NoteEvidenceCreate */
        NoteEvidenceCreate: {
            /** Source Type */
            source_type?: string | null;
            /** Source Ref */
            source_ref?: string | null;
            /** Osis Refs */
            osis_refs?: string[] | null;
            /** Citation */
            citation?: string | null;
            /** Snippet */
            snippet?: string | null;
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** OverviewBullet */
        OverviewBullet: {
            /** Summary */
            summary: string;
            /** Citations */
            citations?: string[];
        };
        /** Passage */
        Passage: {
            /** Id */
            id: string;
            /** Document Id */
            document_id: string;
            /** Text */
            text: string;
            /** Osis Ref */
            osis_ref?: string | null;
            /** Start Char */
            start_char?: number | null;
            /** End Char */
            end_char?: number | null;
            /** Page No */
            page_no?: number | null;
            /** T Start */
            t_start?: number | null;
            /** T End */
            t_end?: number | null;
            /**
             * Score
             * @description Optional retrieval score
             */
            score?: number | null;
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** ProviderSettingsRequest */
        ProviderSettingsRequest: {
            /** Api Key */
            api_key?: string | null;
            /** Base Url */
            base_url?: string | null;
            /** Default Model */
            default_model?: string | null;
            /** Extra Headers */
            extra_headers?: {
                [key: string]: string;
            } | null;
        };
        /** ProviderSettingsResponse */
        ProviderSettingsResponse: {
            /** Provider */
            provider: string;
            /** Base Url */
            base_url?: string | null;
            /** Default Model */
            default_model?: string | null;
            /** Extra Headers */
            extra_headers?: {
                [key: string]: string;
            } | null;
            /**
             * Has Api Key
             * @default false
             */
            has_api_key: boolean;
        };
        /** RAGAnswer */
        RAGAnswer: {
            /** Summary */
            summary: string;
            /** Citations */
            citations: components["schemas"]["RAGCitation-Output"][];
            /** Model Name */
            model_name?: string | null;
            /** Model Output */
            model_output?: string | null;
            /** Guardrail Profile */
            guardrail_profile?: {
                [key: string]: string;
            } | null;
        };
        /** RAGCitation */
        "RAGCitation-Input": {
            /** Index */
            index: number;
            /** Osis */
            osis: string;
            /** Anchor */
            anchor: string;
            /** Passage Id */
            passage_id: string;
            /** Document Id */
            document_id: string;
            /** Document Title */
            document_title?: string | null;
            /** Snippet */
            snippet: string;
            /** Source Url */
            source_url?: string | null;
            /** Raw Snippet */
            raw_snippet?: string | null;
        };
        /** RAGCitation */
        "RAGCitation-Output": {
            /** Index */
            index: number;
            /** Osis */
            osis: string;
            /** Anchor */
            anchor: string;
            /** Passage Id */
            passage_id: string;
            /** Document Id */
            document_id: string;
            /** Document Title */
            document_title?: string | null;
            /** Snippet */
            snippet: string;
            /** Source Url */
            source_url?: string | null;
        };
        /**
         * RecorderMetadata
         * @description Optional metadata supplied by clients when recording trails.
         */
        RecorderMetadata: {
            /** User Id */
            user_id?: string | null;
            /** Source */
            source?: string | null;
        };
        /** ReliabilityOverviewResponse */
        ReliabilityOverviewResponse: {
            /** Osis */
            osis: string;
            /** Mode */
            mode: string;
            /** Consensus */
            consensus?: components["schemas"]["OverviewBullet"][];
            /** Disputed */
            disputed?: components["schemas"]["OverviewBullet"][];
            /** Manuscripts */
            manuscripts?: components["schemas"]["OverviewBullet"][];
        };
        /** ReportBuildRequest */
        ReportBuildRequest: {
            /** Osis */
            osis: string;
            /** Stance */
            stance: string;
            /** Claims */
            claims?: components["schemas"]["ReportClaim"][] | null;
            /** Historicity Query */
            historicity_query?: string | null;
            /** Narrative Text */
            narrative_text?: string | null;
            /**
             * Include Fallacies
             * @default false
             */
            include_fallacies: boolean;
            /** Variants Limit */
            variants_limit?: number | null;
            /**
             * Citations Limit
             * @default 5
             */
            citations_limit: number;
            /**
             * Min Fallacy Confidence
             * @default 0
             */
            min_fallacy_confidence: number;
        };
        /** ReportClaim */
        ReportClaim: {
            /** Statement */
            statement: string;
            /** Stance */
            stance?: string | null;
            /** Support */
            support?: string[] | null;
        };
        /** ResearchNote */
        ResearchNote: {
            /** Id */
            id: string;
            /** Osis */
            osis: string;
            /** Body */
            body: string;
            /** Title */
            title?: string | null;
            /** Stance */
            stance?: string | null;
            /** Claim Type */
            claim_type?: string | null;
            /** Confidence */
            confidence?: number | null;
            /** Tags */
            tags?: string[] | null;
            /** Evidences */
            evidences?: components["schemas"]["NoteEvidence"][];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** ResearchNoteCreate */
        ResearchNoteCreate: {
            /** Osis */
            osis: string;
            /** Body */
            body: string;
            /** Title */
            title?: string | null;
            /** Stance */
            stance?: string | null;
            /** Claim Type */
            claim_type?: string | null;
            /** Confidence */
            confidence?: number | null;
            /** Tags */
            tags?: string[] | null;
            /** Evidences */
            evidences?: components["schemas"]["NoteEvidenceCreate"][] | null;
        };
        /** ResearchNoteResponse */
        ResearchNoteResponse: {
            note: components["schemas"]["ResearchNote"];
        };
        /** ResearchNoteUpdate */
        ResearchNoteUpdate: {
            /** Osis */
            osis?: string | null;
            /** Body */
            body?: string | null;
            /** Title */
            title?: string | null;
            /** Stance */
            stance?: string | null;
            /** Claim Type */
            claim_type?: string | null;
            /** Confidence */
            confidence?: number | null;
            /** Tags */
            tags?: string[] | null;
            /** Evidences */
            evidences?: components["schemas"]["NoteEvidenceCreate"][] | null;
        };
        /** ResearchNotesResponse */
        ResearchNotesResponse: {
            /** Osis */
            osis: string;
            /** Notes */
            notes: components["schemas"]["ResearchNote"][];
            /** Total */
            total: number;
        };
        /** ResearchReport */
        ResearchReport: {
            /** Osis */
            osis: string;
            /** Stance */
            stance: string;
            /** Summary */
            summary: string;
            /** Sections */
            sections?: components["schemas"]["ResearchReportSection"][];
            /** Meta */
            meta?: {
                [key: string]: unknown;
            };
        };
        /** ResearchReportResponse */
        ResearchReportResponse: {
            report: components["schemas"]["ResearchReport"];
        };
        /** ResearchReportSection */
        ResearchReportSection: {
            /** Title */
            title: string;
            /** Summary */
            summary?: string | null;
            /** Items */
            items?: {
                [key: string]: unknown;
            }[];
        };
        /** ScriptureResponse */
        ScriptureResponse: {
            /** Osis */
            osis: string;
            /** Translation */
            translation: string;
            /** Verses */
            verses: components["schemas"]["ScriptureVerse"][];
            /** Meta */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** ScriptureVerse */
        ScriptureVerse: {
            /** Osis */
            osis: string;
            /** Translation */
            translation: string;
            /** Text */
            text: string;
            /** Book */
            book?: string | null;
            /** Chapter */
            chapter?: number | null;
            /** Verse */
            verse?: number | null;
        };
        /** SermonPrepRequest */
        SermonPrepRequest: {
            /** Topic */
            topic: string;
            /** Osis */
            osis?: string | null;
            filters?: components["schemas"]["HybridSearchFilters"];
            /** Model */
            model?: string | null;
            recorder_metadata?: components["schemas"]["RecorderMetadata"] | null;
        };
        /** SimpleIngestRequest */
        SimpleIngestRequest: {
            /** Sources */
            sources: string[];
            /**
             * Mode
             * @default api
             * @enum {string}
             */
            mode: "api" | "worker";
            /**
             * Batch Size
             * @default 10
             */
            batch_size: number;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /** Post Batch */
            post_batch?: string[] | null;
            /**
             * Dry Run
             * @default false
             */
            dry_run: boolean;
        };
        /** SummaryJobRequest */
        SummaryJobRequest: {
            /** Document Id */
            document_id: string;
        };
        /**
         * TelemetryBatch
         * @description Envelope for batching client telemetry events.
         */
        TelemetryBatch: {
            /**
             * Events
             * @description Ordered list of telemetry events captured on the client side.
             */
            events?: components["schemas"]["TelemetryEvent"][];
            /**
             * Page
             * @description Logical page or surface that generated this telemetry batch.
             */
            page?: string | null;
        };
        /**
         * TelemetryEvent
         * @description Client-side performance measurement emitted from the web app.
         */
        TelemetryEvent: {
            /**
             * Event
             * @description Event identifier, e.g. copilot.retrieval.
             */
            event: string;
            /**
             * Duration Ms
             * @description Measured duration of the event in milliseconds.
             */
            duration_ms: number;
            /**
             * Workflow
             * @description Optional workflow or feature identifier associated with the metric.
             */
            workflow?: string | null;
            /**
             * Metadata
             * @description Additional context key-value pairs supplied by the client.
             */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /** TopicCluster */
        TopicCluster: {
            /** Topic */
            topic: string;
            /** New Documents */
            new_documents: number;
            /** Total Documents */
            total_documents: number;
            /** Document Ids */
            document_ids: string[];
        };
        /** TopicDigest */
        TopicDigest: {
            /**
             * Generated At
             * Format: date-time
             */
            generated_at: string;
            /**
             * Window Start
             * Format: date-time
             */
            window_start: string;
            /** Topics */
            topics: components["schemas"]["TopicCluster"][];
        };
        /** TopicDigestJobRequest */
        TopicDigestJobRequest: {
            /** Since */
            since?: string | null;
            /** Notify */
            notify?: string[] | null;
        };
        /** TrailReplayDiff */
        TrailReplayDiff: {
            /** Changed */
            changed: boolean;
            /** Summary Changed */
            summary_changed: boolean;
            /** Added Citations */
            added_citations?: string[];
            /** Removed Citations */
            removed_citations?: string[];
        };
        /** TrailReplayRequest */
        TrailReplayRequest: {
            /** Model */
            model?: string | null;
        };
        /** TrailReplayResponse */
        TrailReplayResponse: {
            /** Trail Id */
            trail_id: string;
            /** Original Output */
            original_output?: unknown | null;
            /** Replay Output */
            replay_output: unknown;
            diff: components["schemas"]["TrailReplayDiff"];
        };
        /** TrailSource */
        TrailSource: {
            /** Id */
            id: string;
            /** Trail Id */
            trail_id: string;
            /** Source Type */
            source_type: string;
            /** Reference */
            reference: string;
            /** Meta */
            meta?: unknown | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** TranscriptExportRequest */
        TranscriptExportRequest: {
            /** Document Id */
            document_id: string;
            /**
             * Format
             * @default markdown
             */
            format: string;
        };
        /** TranscriptSearchResponse */
        TranscriptSearchResponse: {
            /** Osis */
            osis?: string | null;
            /** Video */
            video?: string | null;
            /** Total */
            total: number;
            /** Segments */
            segments: components["schemas"]["TranscriptSegmentModel"][];
        };
        /** TranscriptSegmentModel */
        TranscriptSegmentModel: {
            /** Id */
            id: string;
            /** Document Id */
            document_id?: string | null;
            /** Video Id */
            video_id?: string | null;
            /** Text */
            text: string;
            /** Primary Osis */
            primary_osis?: string | null;
            /** Osis Refs */
            osis_refs?: string[] | null;
            /** T Start */
            t_start?: number | null;
            /** T End */
            t_end?: number | null;
            /** Source Ref */
            source_ref?: string | null;
            /** Video Title */
            video_title?: string | null;
            /** Video Url */
            video_url?: string | null;
        };
        /** UrlIngestRequest */
        UrlIngestRequest: {
            /** Url */
            url: string;
            /** Source Type */
            source_type?: string | null;
            /** Frontmatter */
            frontmatter?: {
                [key: string]: unknown;
            } | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VariantApparatusResponse */
        VariantApparatusResponse: {
            /** Osis */
            osis: string;
            /** Readings */
            readings?: components["schemas"]["VariantReading"][];
            /** Total */
            total: number;
        };
        /** VariantReading */
        VariantReading: {
            /** Id */
            id: string;
            /** Osis */
            osis: string;
            /** Category */
            category: string;
            /** Reading */
            reading: string;
            /** Note */
            note?: string | null;
            /** Source */
            source?: string | null;
            /** Witness */
            witness?: string | null;
            /** Translation */
            translation?: string | null;
            /** Confidence */
            confidence?: number | null;
            /** Dataset */
            dataset?: string | null;
            /** Disputed */
            disputed?: boolean | null;
            /** Witness Metadata */
            witness_metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /** VerseCopilotRequest */
        VerseCopilotRequest: {
            /** Osis */
            osis?: string | null;
            /** Passage */
            passage?: string | null;
            /** Question */
            question?: string | null;
            filters?: components["schemas"]["HybridSearchFilters"];
            /** Model */
            model?: string | null;
            recorder_metadata?: components["schemas"]["RecorderMetadata"] | null;
        };
        /** VerseMention */
        VerseMention: {
            passage: components["schemas"]["Passage"];
            /**
             * Context Snippet
             * @description Relevant text around the verse reference
             */
            context_snippet: string;
        };
        /** VerseMentionsResponse */
        VerseMentionsResponse: {
            /** Osis */
            osis: string;
            /** Mentions */
            mentions: components["schemas"]["VerseMention"][];
            /** Total */
            total: number;
        };
        /** VersePerspectiveQuote */
        VersePerspectiveQuote: {
            /** Segment Id */
            segment_id?: string | null;
            /** Quote Md */
            quote_md: string;
            /** Source Ref */
            source_ref?: string | null;
            /** Osis Refs */
            osis_refs?: string[] | null;
            video?: components["schemas"]["VersePerspectiveVideo"] | null;
        };
        /** VersePerspectiveVideo */
        VersePerspectiveVideo: {
            /** Video Id */
            video_id?: string | null;
            /** Title */
            title?: string | null;
            /** Url */
            url?: string | null;
            /** T Start */
            t_start?: number | null;
        };
        /** VerseTimelineBucket */
        VerseTimelineBucket: {
            /**
             * Label
             * @description Human-readable window identifier
             */
            label: string;
            /**
             * Start
             * Format: date-time
             * @description Inclusive start of the window
             */
            start: string;
            /**
             * End
             * Format: date-time
             * @description Exclusive end of the window
             */
            end: string;
            /**
             * Count
             * @description Number of mentions in the window
             */
            count: number;
            /**
             * Document Ids
             * @description Unique document identifiers represented in the bucket
             */
            document_ids?: string[];
            /**
             * Sample Passage Ids
             * @description Sample passage identifiers from the bucket
             */
            sample_passage_ids?: string[];
        };
        /** VerseTimelineResponse */
        VerseTimelineResponse: {
            /** Osis */
            osis: string;
            /**
             * Window
             * @enum {string}
             */
            window: "week" | "month" | "quarter" | "year";
            /** Buckets */
            buckets: components["schemas"]["VerseTimelineBucket"][];
            /** Total Mentions */
            total_mentions: number;
        };
        /**
         * WatchlistCreateRequest
         * @description Payload required to create a new watchlist.
         */
        WatchlistCreateRequest: {
            /** Name */
            name: string;
            filters?: components["schemas"]["WatchlistFilters"] | null;
            /**
             * Cadence
             * @default daily
             */
            cadence: string;
            /** Delivery Channels */
            delivery_channels?: string[] | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
        };
        /**
         * WatchlistFilters
         * @description Structured filter definition reused across watchlists.
         */
        WatchlistFilters: {
            /** Osis */
            osis?: string[] | null;
            /** Keywords */
            keywords?: string[] | null;
            /** Authors */
            authors?: string[] | null;
            /** Topics */
            topics?: string[] | null;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * WatchlistMatch
         * @description Individual match surfaced during a watchlist evaluation run.
         */
        WatchlistMatch: {
            /** Document Id */
            document_id: string;
            /** Passage Id */
            passage_id?: string | null;
            /** Osis */
            osis?: string | null;
            /** Snippet */
            snippet?: string | null;
            /** Reasons */
            reasons?: string[] | null;
        };
        /**
         * WatchlistResponse
         * @description Serialized representation of a stored user watchlist.
         */
        WatchlistResponse: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Name */
            name: string;
            filters: components["schemas"]["WatchlistFilters"];
            /** Cadence */
            cadence: string;
            /** Delivery Channels */
            delivery_channels: string[];
            /** Is Active */
            is_active: boolean;
            /** Last Run */
            last_run?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * WatchlistRunResponse
         * @description Response returned when a watchlist is evaluated.
         */
        WatchlistRunResponse: {
            /** Id */
            id?: string | null;
            /** Watchlist Id */
            watchlist_id: string;
            /**
             * Run Started
             * Format: date-time
             */
            run_started: string;
            /**
             * Run Completed
             * Format: date-time
             */
            run_completed: string;
            /**
             * Window Start
             * Format: date-time
             */
            window_start: string;
            /** Matches */
            matches: components["schemas"]["WatchlistMatch"][];
            /** Document Ids */
            document_ids: string[];
            /** Passage Ids */
            passage_ids: string[];
            /** Delivery Status */
            delivery_status?: string | null;
            /** Error */
            error?: string | null;
        };
        /**
         * WatchlistUpdateRequest
         * @description Patch payload for updating an existing watchlist.
         */
        WatchlistUpdateRequest: {
            /** Name */
            name?: string | null;
            filters?: components["schemas"]["WatchlistFilters"] | null;
            /** Cadence */
            cadence?: string | null;
            /** Delivery Channels */
            delivery_channels?: string[] | null;
            /** Is Active */
            is_active?: boolean | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ingest_file_ingest_file_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_ingest_file_ingest_file_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentIngestResponse"];
                };
            };
            /** @description Invalid ingest request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Upload too large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ingest_url_ingest_url_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UrlIngestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentIngestResponse"];
                };
            };
            /** @description Invalid ingest request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Upload too large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    simple_ingest_ingest_simple_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleIngestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid ingest request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Upload too large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ingest_transcript_ingest_transcript_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_ingest_transcript_ingest_transcript_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentIngestResponse"];
                };
            };
            /** @description Invalid ingest request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Upload too large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_jobs_jobs__get: {
        parameters: {
            query?: {
                limit?: number;
                /** @description Filter jobs by document. */
                document_id?: string | null;
                /** @description Filter by job status. */
                status?: string | null;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_jobs__job_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    enqueue_reparse_job_jobs_reparse__document_id__post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobQueuedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    enqueue_enrichment_job_jobs_enrich__document_id__post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    enqueue_refresh_hnsw_job_jobs_refresh_hnsw_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HNSWRefreshJobRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    enqueue_summary_job_jobs_summaries_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SummaryJobRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    enqueue_topic_digest_job_jobs_topic_digest_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TopicDigestJobRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    enqueue_citation_validation_job_jobs_validate_citations_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CitationValidationJobRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    enqueue_job_jobs_enqueue_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JobEnqueueRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobEnqueueResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_search__get: {
        parameters: {
            query?: {
                /** @description Keyword query */
                q?: string | null;
                /** @description Normalized OSIS reference */
                osis?: string | null;
                /** @description Restrict to a collection */
                collection?: string | null;
                /** @description Filter by author */
                author?: string | null;
                /** @description Restrict to a source type */
                source_type?: string | null;
                /** @description Restrict to documents aligned with a theological tradition */
                theological_tradition?: string | null;
                /** @description Restrict to documents tagged with a topic domain */
                topic_domain?: string | null;
                k?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HybridSearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_deliverable_export_deliverable_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeliverableRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliverableResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Deliverable not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_search_export_search_get: {
        parameters: {
            query?: {
                /** @description Keyword query to run. */
                q?: string | null;
                /** @description Optional OSIS reference to filter by. */
                osis?: string | null;
                /** @description Filter results to a collection. */
                collection?: string | null;
                /** @description Filter by author. */
                author?: string | null;
                /** @description Restrict to a specific source type. */
                source_type?: string | null;
                /** @description Maximum number of results to export. */
                k?: number;
                /** @description Resume from a specific passage identifier. */
                cursor?: string | null;
                /** @description Maximum number of rows to return. */
                limit?: number | null;
                /** @description Comma separated list of fields to include. */
                fields?: string | null;
                /** @description Include full passage text in the export. */
                include_text?: boolean;
                /** @description results or mentions. */
                mode?: string;
                /** @description Response format (json, ndjson, csv). */
                format?: string;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_documents_endpoint_export_documents_get: {
        parameters: {
            query?: {
                /** @description Collection to export. */
                collection?: string | null;
                /** @description Filter documents by author. */
                author?: string | null;
                /** @description Restrict to a source type. */
                source_type?: string | null;
                /** @description Whether to include passages in the export. */
                include_passages?: boolean;
                /** @description Include passage text when exporting passages. */
                include_text?: boolean;
                /** @description Resume from a specific document identifier. */
                cursor?: string | null;
                /** @description Maximum number of documents to export. */
                limit?: number | null;
                /** @description Comma separated list of document fields to include. */
                fields?: string | null;
                /** @description Response format (json or ndjson). */
                format?: string;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verse_mentions_verses__osis__mentions_get: {
        parameters: {
            query?: {
                /** @description Filter by source type */
                source_type?: string | null;
                /** @description Filter by collection */
                collection?: string | null;
                /** @description Filter by author */
                author?: string | null;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                osis: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerseMentionsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verse_timeline_verses__osis__timeline_get: {
        parameters: {
            query?: {
                /** @description Aggregation window */
                window?: string;
                /** @description Maximum number of windows to return */
                limit?: number;
                /** @description Filter by source type */
                source_type?: string | null;
                /** @description Filter by collection */
                collection?: string | null;
                /** @description Filter by author */
                author?: string | null;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                osis: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerseTimelineResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    document_list_documents__get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    latest_digest_document_documents_digest_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentDetailResponse"];
                };
            };
            /** @description Document not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    document_detail_documents__document_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentDetailResponse"];
                };
            };
            /** @description Document not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_document_metadata_documents__document_id__patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentDetailResponse"];
                };
            };
            /** @description Document not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    document_passages_documents__document_id__passages_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentPassagesResponse"];
                };
            };
            /** @description Document not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    document_annotations_documents__document_id__annotations_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentAnnotationResponse"][];
                };
            };
            /** @description Document not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_document_annotation_documents__document_id__annotations_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                document_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentAnnotationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentAnnotationResponse"];
                };
            };
            /** @description Document not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_document_annotation_documents__document_id__annotations__annotation_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                document_id: string;
                annotation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Document not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_features_features__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: boolean;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    discovery_features_discovery_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: {
                            [key: string]: boolean;
                        };
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_scripture_research_scripture_get: {
        parameters: {
            query: {
                /** @description OSIS reference or range */
                osis: string;
                /** @description Preferred translation code */
                translation?: string | null;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScriptureResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_crossrefs_research_crossrefs_get: {
        parameters: {
            query: {
                /** @description Verse to fetch cross-references for */
                osis: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrossReferenceResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_variants_research_variants_get: {
        parameters: {
            query: {
                /** @description Verse or range to retrieve apparatus notes for */
                osis: string;
                /** @description Optional category filters such as manuscript, translation, version */
                category?: string[] | null;
                /** @description Maximum number of apparatus entries to return */
                limit?: number | null;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VariantApparatusResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_dss_links_research_dss_links_get: {
        parameters: {
            query: {
                /** @description Verse or range to retrieve Dead Sea Scrolls parallels for */
                osis: string;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DssLinksResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_reliability_overview_research_overview_get: {
        parameters: {
            query: {
                /** @description Verse to summarise */
                osis: string;
                /** @description Active study mode such as apologetic or skeptical */
                mode?: string | null;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReliabilityOverviewResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_morphology_research_morphology_get: {
        parameters: {
            query: {
                /** @description Verse to fetch morphology for */
                osis: string;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MorphologyResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_notes_research_notes_get: {
        parameters: {
            query: {
                /** @description Anchor OSIS reference */
                osis: string;
                /** @description Optional stance label to filter by */
                stance?: string | null;
                /** @description Optional claim type to filter by */
                claim_type?: string | null;
                /** @description Filter notes containing a specific tag */
                tag?: string | null;
                /** @description Minimum confidence score inclusive */
                min_confidence?: number | null;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResearchNotesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_note_research_notes_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResearchNoteCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResearchNoteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_historicity_research_historicity_get: {
        parameters: {
            query: {
                /** @description Keywords to locate related citations */
                query: string;
                /** @description Minimum publication year inclusive */
                year_from?: number | null;
                /** @description Maximum publication year inclusive */
                year_to?: number | null;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoricitySearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_note_research_notes__note_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                note_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_note_research_notes__note_id__patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                note_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResearchNoteUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResearchNoteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    detect_fallacies_research_fallacies_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FallacyDetectRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FallacyDetectResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    build_report_research_report_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReportBuildRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResearchReportResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_contradictions_research_contradictions_get: {
        parameters: {
            query: {
                /** @description OSIS reference or list of references */
                osis: string[];
                /** @description Optional topic tag filter */
                topic?: string | null;
                /** @description Filter by interpretive perspective (apologetic, skeptical, neutral) */
                perspective?: string[] | null;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContradictionSearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_commentaries_research_commentaries_get: {
        parameters: {
            query: {
                /** @description OSIS reference or list of references */
                osis: string[];
                /** @description Filter by interpretive perspective (apologetic, skeptical, neutral) */
                perspective?: string[] | null;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentarySearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    lookup_geo_research_geo_search_get: {
        parameters: {
            query: {
                /** @description Place name or alias */
                query: string;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GeoPlaceSearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    lookup_geo_for_verse_research_geo_verse_get: {
        parameters: {
            query: {
                /** @description OSIS reference to inspect */
                osis: string;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GeoVerseResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_creators_route_creators_search_get: {
        parameters: {
            query?: {
                /** @description Filter creators by name. */
                query?: string | null;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatorSearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_creator_topic_profile_creators__creator_id__topics_get: {
        parameters: {
            query: {
                /** @description Topic to summarize for the creator. */
                topic: string;
                /** @description Maximum number of quotes to return. */
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                creator_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatorTopicProfile"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_creator_verse_perspectives_creators_verses_get: {
        parameters: {
            query: {
                /** @description OSIS reference or short range */
                osis: string;
                limit_creators?: number;
                limit_quotes?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatorVersePerspectiveResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_creator_verse_perspectives_creators_verses__osis__get: {
        parameters: {
            query?: {
                limit_creators?: number;
                limit_quotes?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                osis: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatorVersePerspectiveResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_transcripts_transcripts_search_get: {
        parameters: {
            query?: {
                /** @description Filter by OSIS reference. */
                osis?: string | null;
                /** @description Filter by video identifier or internal id. */
                video?: string | null;
                limit?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TranscriptSearchResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_trail_trails__trail_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                trail_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AgentTrail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    replay_trail_trails__trail_id__replay_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                trail_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TrailReplayRequest"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrailReplayResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ingest_client_telemetry_analytics_telemetry_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TelemetryBatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ingest_feedback_event_analytics_feedback_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeedbackEventPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_ai_features_ai_features_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIFeaturesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_citations_ai_citations_export_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CitationExportRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CitationExportResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_llm_models_ai_llm_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMSettingsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_llm_model_ai_llm_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMModelRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMSettingsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_default_llm_model_ai_llm_default_patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMDefaultRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMSettingsResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_llm_model_ai_llm__name__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMSettingsResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_llm_model_ai_llm__name__patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LLMModelUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMSettingsResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    chat_turn_ai_chat_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatSessionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatSessionResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chat_session_ai_chat__session_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatSessionState"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_chat_goals_ai_chat__session_id__goals_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatGoalProgress"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    close_chat_goal_ai_chat__session_id__goals__goal_id__close_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                session_id: string;
                goal_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json"?: components["schemas"]["GoalCloseRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatGoalState"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_goal_priority_ai_chat__session_id__goals__goal_id__priority_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                session_id: string;
                goal_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoalPriorityUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatGoalProgress"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verse_copilot_ai_verse_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerseCopilotRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sermon_prep_ai_sermon_prep_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SermonPrepRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sermon_prep_export_ai_sermon_prep_export_post: {
        parameters: {
            query?: {
                /** @description markdown, ndjson, csv, or pdf */
                format?: string;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SermonPrepRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExportDeliverableResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    transcript_export_ai_transcript_export_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TranscriptExportRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExportDeliverableResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    comparative_analysis_ai_comparative_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComparativeAnalysisRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    multimedia_digest_ai_multimedia_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MultimediaDigestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    devotional_flow_ai_devotional_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DevotionalRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    collaboration_ai_collaboration_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CollaborationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    corpus_curation_ai_curation_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CorpusCurationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_topic_digest_ai_digest_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopicDigest"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_topic_digest_ai_digest_post: {
        parameters: {
            query?: {
                /** @description Lookback window in hours */
                hours?: number;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopicDigest"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_user_watchlists_ai_digest_watchlists_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchlistResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user_watchlist_ai_digest_watchlists_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WatchlistCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchlistResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_watchlist_ai_digest_watchlists__watchlist_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                watchlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Watchlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_watchlist_ai_digest_watchlists__watchlist_id__patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                watchlist_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WatchlistUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchlistResponse"];
                };
            };
            /** @description Watchlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_user_watchlist_events_ai_digest_watchlists__watchlist_id__events_get: {
        parameters: {
            query?: {
                /** @description Return events generated after this timestamp */
                since?: string | null;
            };
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                watchlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchlistRunResponse"][];
                };
            };
            /** @description Watchlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    preview_user_watchlist_ai_digest_watchlists__watchlist_id__preview_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                watchlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchlistRunResponse"];
                };
            };
            /** @description Watchlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_user_watchlist_ai_digest_watchlists__watchlist_id__run_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                watchlist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WatchlistRunResponse"];
                };
            };
            /** @description Watchlist not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_providers_settings_ai_providers_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderSettingsResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_provider_settings_settings_ai_providers__provider__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                provider: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderSettingsResponse"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upsert_provider_settings_settings_ai_providers__provider__put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                provider: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProviderSettingsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderSettingsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_provider_settings_settings_ai_providers__provider__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-API-Key"?: string | null;
            };
            path: {
                provider: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    metrics_endpoint_metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
