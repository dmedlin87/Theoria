"use client";

import { useMemo, useState, type FormEvent } from "react";

import styles from "./HypothesesDashboard.module.css";
import {
  DEFAULT_FILTERS,
  type HypothesisFilters,
  type HypothesisRecord,
  type HypothesisStatus,
  type HypothesisUpdateChanges,
  fetchHypotheses,
  updateHypothesis,
} from "./client";

const STATUS_ORDER: HypothesisStatus[] = ["active", "confirmed", "refuted", "uncertain"];

const STATUS_CLASS: Record<HypothesisStatus, string> = {
  active: styles.statusActive,
  confirmed: styles.statusConfirmed,
  refuted: styles.statusRefuted,
  uncertain: styles.statusUncertain,
};

type HypothesesDashboardProps = {
  initialHypotheses: HypothesisRecord[];
  initialTotal: number;
  initialFilters?: HypothesisFilters;
};

export default function HypothesesDashboardClient({
  initialHypotheses,
  initialTotal,
  initialFilters = DEFAULT_FILTERS,
}: HypothesesDashboardProps) {
  const [hypotheses, setHypotheses] = useState<HypothesisRecord[]>(initialHypotheses);
  const [total, setTotal] = useState(initialTotal);
  const [filters, setFilters] = useState<HypothesisFilters>(initialFilters);
  const [draftQuery, setDraftQuery] = useState(initialFilters.query ?? "");
  const [draftConfidence, setDraftConfidence] = useState<string>(
    initialFilters.minConfidence != null ? initialFilters.minConfidence.toString() : "",
  );
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [pendingAction, setPendingAction] = useState<string | null>(null);

  const statusCounts = useMemo(() => {
    return hypotheses.reduce<Record<HypothesisStatus, number>>(
      (acc, hypothesis) => {
        acc[hypothesis.status] = (acc[hypothesis.status] ?? 0) + 1;
        return acc;
      },
      { active: 0, confirmed: 0, refuted: 0, uncertain: 0 },
    );
  }, [hypotheses]);

  async function loadHypotheses(nextFilters: HypothesisFilters): Promise<void> {
    setIsLoading(true);
    try {
      const result = await fetchHypotheses(nextFilters);
      setHypotheses(result.hypotheses);
      setTotal(result.total);
      setError(null);
    } catch (err) {
      const message = err instanceof Error ? err.message : "Failed to load hypotheses";
      setError(message);
    } finally {
      setIsLoading(false);
    }
  }

  function toggleStatusFilter(status: HypothesisStatus): void {
    const nextStatuses = filters.statuses.includes(status)
      ? filters.statuses.filter((value) => value !== status)
      : [...filters.statuses, status];
    const nextFilters: HypothesisFilters = {
      ...filters,
      statuses: nextStatuses,
    };
    setFilters(nextFilters);
    void loadHypotheses(nextFilters);
  }

  function resetFilters(): void {
    setDraftQuery("");
    setDraftConfidence("");
    const cleared: HypothesisFilters = { ...DEFAULT_FILTERS, statuses: [] };
    setFilters(cleared);
    void loadHypotheses(cleared);
  }

  async function applyFormFilters(event: FormEvent<HTMLFormElement>): Promise<void> {
    event.preventDefault();
    const minConfidence = draftConfidence.trim() ? Number.parseFloat(draftConfidence) : undefined;
    const nextFilters: HypothesisFilters = {
      ...filters,
      query: draftQuery.trim() || undefined,
      minConfidence: Number.isFinite(minConfidence) ? minConfidence : undefined,
    };
    setFilters(nextFilters);
    await loadHypotheses(nextFilters);
  }

  async function refresh(): Promise<void> {
    await loadHypotheses(filters);
  }

  async function handleStatusUpdate(
    hypothesis: HypothesisRecord,
    updates: HypothesisUpdateChanges,
  ): Promise<void> {
    setPendingAction(hypothesis.id);
    try {
      const updated = await updateHypothesis(hypothesis.id, updates);
      setHypotheses((current) =>
        current.map((item) => (item.id === hypothesis.id ? updated : item)),
      );
      setError(null);
    } catch (err) {
      const message = err instanceof Error ? err.message : "Failed to update hypothesis";
      setError(message);
    } finally {
      setPendingAction(null);
    }
  }

  return (
    <div className={styles.container}>
      <header className={styles.header}>
        <h1 className={styles.title}>Hypothesis Dashboard</h1>
        <p className={styles.subtitle}>
          Track, filter, and adjudicate hypotheses generated by Theo&apos;s research workflows.
        </p>
        <div className={styles.stats}>
          {isLoading ? "Refreshing hypotheses…" : `${total} hypotheses`} · Active {statusCounts.active},
          Confirmed {statusCounts.confirmed}, Refuted {statusCounts.refuted}, Uncertain {
            statusCounts.uncertain
          }
        </div>
      </header>

      <section className={styles.filters}>
        <div className={styles.statusFilters}>
          {STATUS_ORDER.map((status) => (
            <button
              key={status}
              type="button"
              className={styles.statusButton}
              data-active={filters.statuses.includes(status)}
              onClick={() => toggleStatusFilter(status)}
            >
              {status}
            </button>
          ))}
        </div>
        <form className={styles.filtersForm} onSubmit={applyFormFilters}>
          <label>
            <span className="sr-only">Search hypotheses</span>
            <input
              className={styles.searchInput}
              type="search"
              name="query"
              value={draftQuery}
              placeholder="Search claims…"
              onChange={(event) => setDraftQuery(event.target.value)}
            />
          </label>
          <label>
            <span className="sr-only">Minimum confidence</span>
            <input
              className={styles.numberInput}
              type="number"
              step="0.05"
              min="0"
              max="1"
              value={draftConfidence}
              onChange={(event) => setDraftConfidence(event.target.value)}
              placeholder="Min conf."
            />
          </label>
          <button className={styles.primaryButton} type="submit">
            Apply filters
          </button>
          <button className={styles.ghostButton} type="button" onClick={resetFilters}>
            Reset
          </button>
          <button className={styles.ghostButton} type="button" onClick={refresh}>
            Refresh
          </button>
        </form>
      </section>

      {error ? <div className={styles.error}>{error}</div> : null}

      <section aria-live="polite" className={styles.list}>
        {hypotheses.length === 0 ? (
          <div className={styles.emptyState}>
            {isLoading ? "Loading hypotheses…" : "No hypotheses match the current filters."}
          </div>
        ) : (
          hypotheses.map((hypothesis) => {
            const statusClass = STATUS_CLASS[hypothesis.status];
            const updated = new Date(hypothesis.updatedAt).toLocaleString();
            const confidencePercent = `${Math.round(hypothesis.confidence * 100)}%`;
            const supporting = hypothesis.supportingPassageIds.length;
            const contradicting = hypothesis.contradictingPassageIds.length;

            return (
              <article key={hypothesis.id} className={styles.card}>
                <div className={styles.cardHeader}>
                  <h2 className={styles.claim}>{hypothesis.claim}</h2>
                  <span className={`${styles.statusBadge} ${statusClass}`}>
                    <span className={styles.statusDot} />
                    {hypothesis.status}
                  </span>
                </div>
                <div className={styles.metaRow}>
                  <span>Confidence: {confidencePercent}</span>
                  <span>Supporting: {supporting}</span>
                  <span>Contradicting: {contradicting}</span>
                  <span>Updated: {updated}</span>
                </div>
                <div className={styles.actions}>
                  <button
                    className={styles.actionButton}
                    data-variant="confirm"
                    type="button"
                    disabled={pendingAction === hypothesis.id}
                    onClick={() =>
                      handleStatusUpdate(hypothesis, { status: "confirmed", confidence: 0.9 })
                    }
                  >
                    Mark confirmed
                  </button>
                  <button
                    className={styles.actionButton}
                    data-variant="refute"
                    type="button"
                    disabled={pendingAction === hypothesis.id}
                    onClick={() =>
                      handleStatusUpdate(hypothesis, { status: "refuted", confidence: 0.05 })
                    }
                  >
                    Mark refuted
                  </button>
                  <button
                    className={styles.actionButton}
                    type="button"
                    disabled={pendingAction === hypothesis.id}
                    onClick={() =>
                      handleStatusUpdate(hypothesis, {
                        status: "active",
                        confidence: Math.min(0.5, hypothesis.confidence),
                      })
                    }
                  >
                    Reset to review
                  </button>
                </div>
              </article>
            );
          })
        )}
      </section>
    </div>
  );
}
